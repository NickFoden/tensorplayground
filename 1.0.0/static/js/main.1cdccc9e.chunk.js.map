{"version":3,"sources":["lib/formatKB.js","data/inputTensors.js","lib/convertURLtoTensor.js","App.js","lib/useMergeState.js","lib/addToConsoleLog.js","lib/startCodeCreator.js","components/tensorSelector.js","components/codeProfile.js","components/memoryStatus.js","components/modelModal.js","components/inputModal.js","components/runNav.js","components/clearButton.js","components/imageTensorInspector.js","components/simpleChart.js","components/results.js","components/shareModal.js","lib/copyToClipboard.js","serviceWorker.js","index.js"],"names":["__webpack_exports__","numBytes","Math","round","toString","replace","id","thumb","desc","full","channels","_tensorflow_tfjs__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","imageURL","Promise","resolve","reject","img","Image","crossOrigin","src","onload","tf","fromPixels","onerror","e","playExplainer","event","iframe","target","getIframe","requestFullScreen","mozRequestFullScreen","webkitRequestFullScreen","bind","stopExplainer","document","fullscreen","exitFullscreen","msExitFullscreen","mozCancelFullScreen","webkitExitFullscreen","App","_useMergeState","useMergeState","userCode","currentError","activeTensor","displayTensor","codeProfile","inputTensorInfo","activeModel","activeModelInfo","shareVisible","modelVisible","inputVisible","consoleOutput","_useMergeState2","Object","C_Users_gantm_Desktop_Code_ML_tensorplayground_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_2__","sandboxSettings","setSandboxSettings","addToConsoleLog","args","allThings","slice","call","map","arg","stringify","join","sharePlayground","urlParams","URLSearchParams","append","JSON","window","history","replaceState","concat","location","origin","pathname","runCode","_ref","C_Users_gantm_Desktop_Code_ML_tensorplayground_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__","C_Users_gantm_Desktop_Code_ML_tensorplayground_node_modules_babel_preset_react_app_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","a","mark","_callee3","timeInfo","wrap","_callee3$","_context3","prev","next","_callee2","_callee2$","_context2","_callee","resultTensor","_callee$","_context","userFunc","eval","Error","dispose","t0","message","stop","sent","apply","this","arguments","tensorize","_ref4","_callee4","data","tensorResult","promiseArray","tensors","previousActive","_context4","Array","isArray","url","convertURLToTensor","all","x","abrupt","shape","console","log","_x","setupSandbox","_ref5","_callee5","settings","inputShape","code","modelInfo","killModel","model","loadFunction","startCode","_args5","_context5","length","undefined","type","fromTFHub","startCodeCreator","_x2","addEventListener","readyState","search","has","inputID","get","parse","localTensor","inputTensors","find","onkeydown","evt","shiftKey","keyCode","preventDefault","hideAllModals","react__WEBPACK_IMPORTED_MODULE_3___default","createElement","className","alt","react_progress_button__WEBPACK_IMPORTED_MODULE_8___default","onClick","_callee6","_context6","_components_tensorSelector__WEBPACK_IMPORTED_MODULE_20__","activeInputTensor","onSelect","react_youtube__WEBPACK_IMPORTED_MODULE_6__","videoId","onPlay","onEnd","onPause","opts","height","width","playerVars","modestbranding","rel","fs","_components_runNav__WEBPACK_IMPORTED_MODULE_27__","run","reset","share","load","react_ace__WEBPACK_IMPORTED_MODULE_10___default","placeholder","mode","theme","name","onChange","fontSize","showPrintMargin","showGutter","highlightActiveLine","value","setOptions","enableBasicAutocompletion","enableLiveAutocompletion","enableSnippets","showLineNumbers","tabSize","useWorker","_components_codeProfile__WEBPACK_IMPORTED_MODULE_21__","profile","react_tabs__WEBPACK_IMPORTED_MODULE_14__","_components_results__WEBPACK_IMPORTED_MODULE_23__","tensor","_components_clearButton__WEBPACK_IMPORTED_MODULE_28__","clear","_components_memoryStatus__WEBPACK_IMPORTED_MODULE_22__","_components_shareModal__WEBPACK_IMPORTED_MODULE_24__","isOpen","hideModal","_components_modelModal__WEBPACK_IMPORTED_MODULE_25__","key","onModelLoad","_ref7","_callee7","info","_context7","_x3","_components_inputModal__WEBPACK_IMPORTED_MODULE_26__","setInput","reducer","prevState","updater","C_Users_gantm_Desktop_Code_ML_tensorplayground_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","initialState","useReducer","thingToAdd","description","parameters","push","label","includes","react__WEBPACK_IMPORTED_MODULE_0__","props","tData","styleClasses","_lib_formatKB__WEBPACK_IMPORTED_MODULE_1__","_ref2","newBytes","newTensors","peakBytes","kernelMs","cleanPeak","timeMS","toFixed","style","styles","container","title","memBox","dataPoint","formatKB","backgroundColor","color","margin","borderBottom","textAlign","display","alignItems","flexDirection","flexWrap","_tensorflow_tfjs__WEBPACK_IMPORTED_MODULE_1__","_lib_formatKB__WEBPACK_IMPORTED_MODULE_2__","issues","_tf$memory","numTensors","numDataBuffers","unreliable","reasons","role","aria-label","options","items","link","getFullInfo","mKey","y","flat","URLInput","show","modelURL","urlCallback","_useState","useState","_useState2","currentModel","setCurrentModel","_useState3","_useState4","setModelURL","dropdownChange","selected","react_modal__WEBPACK_IMPORTED_MODULE_4___default","onRequestClose","shouldCloseOnOverlayClick","shouldCloseOnEscape","closeTimeoutMS","overlayClassName","contentLabel","react_dropdown__WEBPACK_IMPORTED_MODULE_5___default","react_progress_button__WEBPACK_IMPORTED_MODULE_7___default","onSuccess","onError","alert","href","ShareRow","C_Users_gantm_Desktop_Code_ML_tensorplayground_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","inputURL","setInputURL","urlValid","setURLValid","react__WEBPACK_IMPORTED_MODULE_1___default","match","disabled","react_modal__WEBPACK_IMPORTED_MODULE_2___default","react__WEBPACK_IMPORTED_MODULE_0___default","n","_fortawesome_react_fontawesome__WEBPACK_IMPORTED_MODULE_1__","_fortawesome_free_solid_svg_icons__WEBPACK_IMPORTED_MODULE_2__","_fortawesome_free_brands_svg_icons__WEBPACK_IMPORTED_MODULE_3__","tfVersion","require","dependencies","icon","faPlay","faAlignLeft","faExternalLinkAlt","faLayerGroup","faFileCode","faGithub","faCodeBranch","float","faTrashAlt","componentToHex","c","hex","Number","toColorHex","rgb","tensorType","r","g","b","_rgb","slicedToArray","ColorBlock","react","marginRight","border","printTensor","areaBox","printText","rankType","dtype","TensorColors","channelCount","aTensor","corners","tl","tr","bl","br","values","dataSync","arr","from","newArr","splice","pixelList","imageTensorInspector_ColorBlock","imageTensorInspector","tensorDisplay","useRef","tensorText","useEffect","asyncToGenerator","regenerator_default","current","toPixels","selfDestruct","updateDisplay","canvas","ref","column","leftColumn","imageTensorInspector_TensorColors","rightColumn","displayText","readOnly","text","justifyContent","flex","minWidth","flexGrow","fontFamily","columns","listStyle","padding","maxWidth","alignSelf","simpleChart","react_default","victory_chart","VictoryTheme","material","victory_scatter","animate","parent","fill","labels","datanum","labelComponent","victory_label","dx","size","chartData","plotData","plotReady","synced","i","jumpSize","charterize","paddingLeft","t","bitly","BitlyClient","process","REACT_APP_BITLY_TOKEN","shareLink","setShareLink","shortLink","shorten","generateLink","str","el","setAttribute","position","left","body","appendChild","getSelection","rangeCount","getRangeAt","select","execCommand","removeChild","removeAllRanges","addRange","copyToClipboard","lib_default","shareModal_ShareRow","assign","Boolean","hostname","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0FAEeA,EAAA,WAAAC,GAAQ,OAAqBC,KAAKC,MAAMF,EAAW,MAFlCG,WAAWC,QAAQ,wBAAyB,wCCA7DL,EAAA,GACb,CACEM,GAAI,QACJC,MAAO,oBACPC,KAAM,aACNC,KAAM,cACNC,SAAU,GAEZ,CACEJ,GAAI,QACJC,MAAO,oBACPC,KAAM,oBACNC,KAAM,cACNC,SAAU,GAEZ,CACEJ,GAAI,QACJC,MAAO,oBACPC,KAAM,kBACNC,KAAM,CAAC,eAAgB,eAAgB,gBACvCC,SAAU,GAEZ,CACEJ,GAAI,OACJC,MAAO,mBACPC,KAAM,kBACNC,KAAM,KACNC,SAAU,sCC3Bd,IAAAC,EAAAC,EAAA,IAEeZ,EAAA,WAACa,EAAUH,GACxB,OAAO,IAAII,QAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAM,IAAIC,MAChBD,EAAIE,YAAc,YAClBF,EAAIG,IAAMP,EACVI,EAAII,OAAS,WACXN,EAAQO,UAAWC,WAAWN,EAAKP,KAErCO,EAAIO,QAAU,SAAAC,GACZT,EAAOS,2uIC0BPC,cAAgB,SAAAC,GACpB,IAAMC,EAASD,EAAME,OAAOC,YAEtBC,EACJH,EAAOG,mBACPH,EAAOI,sBACPJ,EAAOK,wBACLF,GACFA,EAAkBG,KAAKN,EAAvBG,IAIEI,cAAgB,WAChBC,SAASC,aACXD,SAASE,eACLF,SAASE,iBACTF,SAASG,iBACTH,SAASG,mBACTH,SAASI,oBACTJ,SAASI,sBACTJ,SAASK,sBAAwBL,SAASK,yBAGlD,SAASC,MAAM,IAAAC,eACiCC,2DAAc,CAC1DC,SAAU,GACVC,aAAc,KACdC,aAAc,KACdC,cAAe,KACfC,YAAa,KACbC,gBAAiB,KACjBC,YAAa,KACbC,gBAAiB,GACjBC,cAAc,EACdC,cAAc,EACdC,cAAc,EACdC,cAAe,KAbJC,gBAAAC,OAAAC,qKAAA,EAAAD,CAAAf,eAAA,GACNiB,gBADMH,gBAAA,GACWI,mBADXJ,gBAAA,GAiBbK,6DAAgB,SAAAC,GAEd,IAMMC,EAAY,KANA,GAAGC,MAAMC,KAAKH,GAECI,IAAI,SAAAC,GAAG,MACvB,kBAARA,EAAmBC,iDAAUD,EAAK,KAAM,GAAKA,IAGdE,KAAK,MAC7CT,mBAAmB,CACjBL,cAAeI,gBAAgBJ,cAAgBQ,MAInD,IAAMO,gBAAkB,WAAM,IACpB1B,EAA+Ce,gBAA/Cf,SAAUK,EAAqCU,gBAArCV,gBAAiBE,EAAoBQ,gBAApBR,gBAC/BoB,EAAY,IAAIC,gBACpBD,EAAUE,OAAO,OAAQ7B,GACzB2B,EAAUE,OAAO,cAAexB,EAAgB5C,IAChDkE,EAAUE,OAAO,YAAaC,KAAKN,UAAUjB,IACzCwB,OAAOC,QAAQC,cACjBF,OAAOC,QAAQC,aACb,OACA,oBAFF,GAAAC,OAGKH,OAAOI,SAASC,QAHrBF,OAG8BH,OAAOI,SAASE,SAH9C,KAAAH,OAG0DP,KAKxDW,QAAO,eAAAC,KAAA1B,OAAA2B,wKAAA,EAAA3B,CAAA4B,+JAAAC,EAAAC,KAAG,SAAAC,WAAA,IAAAxC,YAAAyC,SAAA,OAAAJ,+JAAAC,EAAAI,KAAA,SAAAC,UAAAC,WAAA,cAAAA,UAAAC,KAAAD,UAAAE,MAAA,cAAAF,UAAAC,KAAA,EAEZvB,kBAFYsB,UAAAE,KAAA,EAIWzE,mDAAAoC,OAAA2B,wKAAA,EAAA3B,CAAA4B,+JAAAC,EAAAC,KAAQ,SAAAQ,WAAA,OAAAV,+JAAAC,EAAAI,KAAA,SAAAM,UAAAC,WAAA,cAAAA,UAAAJ,KAAAI,UAAAH,MAAA,cAAAG,UAAAH,KAAA,EACTzE,sDAAAoC,OAAA2B,wKAAA,EAAA3B,CAAA4B,+JAAAC,EAAAC,KAAW,SAAAW,UAAA,IAAAC,aAAA,OAAAd,+JAAAC,EAAAI,KAAA,SAAAU,SAAAC,UAAA,cAAAA,SAAAR,KAAAQ,SAAAP,MAAA,UAAAO,SAAAR,KAAA,EAErBM,aAAe9E,mDAAQ,WAC3B,IAAMiF,SAAWC,KAAK5C,gBAAgBf,UACtC,OAAO0D,SACLjF,8CACAsC,gBAAgBb,aAChBa,gBAAgBT,eAIfiD,aAXsB,CAAAE,SAAAP,KAAA,cAYzBzE,iEACM,IAAImF,MAAM,0CAbS,OAiBzBL,eAAiBxC,gBAAgBZ,eACjCY,gBAAgBZ,gBAAkBY,gBAAgBb,cAElDa,gBAAgBZ,eACdY,gBAAgBZ,cAAc0D,SAC9B9C,gBAAgBZ,cAAc0D,UAClC7C,mBAAmB,CACjBb,cAAeoD,aACftD,aAAc,OAzBWwD,SAAAP,KAAA,gBAAAO,SAAAR,KAAA,EAAAQ,SAAAK,GAAAL,SAAA,SA4B3BzC,mBAAmB,CAAEf,aAAcwD,SAAAK,GAAEC,QAAS5D,cAAe,OA5BlC,yBAAAsD,SAAAO,SAAAV,QAAA,kBADF,OAC7BlD,YAD6BiD,UAAAY,KAAA,wBAAAZ,UAAAW,SAAAb,cAJnB,OAINN,SAJMG,UAAAiB,KAqCR7D,cAAaA,YAAYyC,SAAWA,UACxC7B,mBAAmB,CAAEZ,0BAtCT4C,UAAAE,KAAA,gBAAAF,UAAAC,KAAA,EAAAD,UAAAc,GAAAd,UAAA,SAwCZhC,mBAAmB,CAAEf,aAAc+C,UAAAc,GAAEC,QAAS5D,cAAe,OAxCjD,yBAAA6C,UAAAgB,SAAApB,SAAA,iBAAH,yBAAAL,KAAA2B,MAAAC,KAAAC,YAAA,GA4CPC,UAAS,eAAAC,EAAAzD,OAAA2B,wKAAA,EAAA3B,CAAA4B,+JAAAC,EAAAC,KAAG,SAAA4B,EAAMC,GAAN,IAAA5G,EAAAC,EAAA4G,EAAAC,EAAAC,EAAAC,EAAA,OAAAnC,+JAAAC,EAAAI,KAAA,SAAA+B,GAAA,cAAAA,EAAA5B,KAAA4B,EAAA3B,MAAA,UACRtF,EAAmB4G,EAAnB5G,KAAMC,EAAa2G,EAAb3G,SADEgH,EAAA5B,KAAA,EAKdxE,kEAEIqG,MAAMC,QAAQnH,GAPJ,CAAAiH,EAAA3B,KAAA,gBAQNwB,EAAe9G,EAAK0D,IAAI,SAAA0D,GAAG,OAAIC,gEAAmBD,EAAKnH,KARjDgH,EAAA3B,KAAA,EASUjF,QAAQiH,IAAIR,GATtB,OASNC,EATME,EAAAZ,KAWZQ,EAAehG,oDAASkG,GAExBA,EAAQrD,IAAI,SAAA6D,GAAC,OAAIA,EAAEtB,YAbPgB,EAAA3B,KAAA,oBAcFtF,EAdE,CAAAiH,EAAA3B,KAAA,SAeZuB,EAAe,KAfHI,EAAA3B,KAAA,wBAAA2B,EAAA3B,KAAA,GAiBS+B,gEAAmBrH,EAAMC,GAjBlC,QAiBZ4G,EAjBYI,EAAAZ,KAAA,eAmBVW,EAAiB7D,gBAAgBb,aACrCa,gBAAgBZ,eACdY,gBAAgBZ,cAAc0D,SAC9B9C,gBAAgBZ,cAAc0D,UAChC7C,mBAAmB,CACjBd,aAAcuE,EACdtE,cAAe,KACfF,aAAc,OAEZ2E,GAAgBA,EAAef,UA5BrBgB,EAAAO,OAAA,SA6BPX,GAAgBA,EAAaY,OA7BtB,QAAAR,EAAA5B,KAAA,GAAA4B,EAAAf,GAAAe,EAAA,SA+Bd7D,mBAAmB,CAAEf,aAAY,mBAAAiC,OAAqBtE,KACtD0H,QAAQC,IAAIV,EAAAf,GAAEC,SAhCA,yBAAAc,EAAAb,SAAAO,EAAA,kBAAH,gBAAAiB,GAAA,OAAAlB,EAAAJ,MAAAC,KAAAC,YAAA,GAoCTqB,aAAY,eAAAC,EAAA7E,OAAA2B,wKAAA,EAAA3B,CAAA4B,+JAAAC,EAAAC,KAAG,SAAAgD,EAAOnB,GAAP,IAAAoB,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA1F,EAAA2F,EAAAC,EAAAC,EAAAhC,UAAA,OAAA3B,+JAAAC,EAAAI,KAAA,SAAAuD,GAAA,cAAAA,EAAApD,KAAAoD,EAAAnD,MAAA,cAAa0C,EAAbQ,EAAAE,OAAA,QAAAC,IAAAH,EAAA,GAAAA,EAAA,GAAwB,GAAxBC,EAAAnD,KAAA,EAEMmB,UAAUG,GAFhB,UAEbqB,EAFaQ,EAAApC,KAGX6B,EAA+BF,EAA/BE,KAAMC,EAAyBH,EAAzBG,UAAWC,EAAcJ,EAAdI,UACrBC,EAAQlF,gBAAgBT,YACxBC,EAAkBwF,GAElBhF,gBAAgBR,gBAEhByF,IAEEC,GAAOxH,sDAAWwH,GACtBA,EAAQ,KACR1F,EAAkB,KAIhBwF,IAAaA,EAAUf,IAjBR,CAAAqB,EAAAnD,KAAA,gBAkBXgD,EACe,UAAnBH,EAAUS,KAAmB/H,6DAAoBA,8DAE/CwH,GAAOxH,sDAAWwH,GArBLI,EAAAnD,KAAA,GAuBHgD,EAAaH,EAAUf,IAAK,CACxCyB,UAAWV,EAAUU,YAxBN,QAuBjBR,EAvBiBI,EAAApC,KAAA,QA6BbkC,EAAYO,8DAChBlC,EAAK7G,KACLkI,EACAtF,EACAuF,GAIF9E,mBAAmB,CACjBZ,YAAa,KACbJ,SAAUmG,EACV9F,gBAAiBmE,EACjBjE,gBAAiBA,EACjBD,YAAa2F,EAEbzF,cAAc,EACdC,cAAc,EACdC,cAAc,EACdC,cAAe,KA/CE,yBAAA0F,EAAArC,SAAA2B,MAAH,gBAAAgB,GAAA,OAAAjB,EAAAxB,MAAAC,KAAAC,YAAA,GAsDlB7E,SAASqH,iBAAiB,mBAAoB,SAAA9H,GAC5C,GAA4B,aAAxBS,SAASsH,WAA2B,CACtCvB,QAAQC,IAAI,kBACZ,IAAI5D,EAAY,IAAIC,gBAAgBG,OAAOI,SAAS2E,QACpD,GAAInF,EAAUoF,IAAI,SAAWpF,EAAUoF,IAAI,eAAgB,CAEzD,IAAMC,EAAUrF,EAAUsF,IAAI,eACxBlB,EAAYjE,KAAKoF,MAAMvF,EAAUsF,IAAI,cACvCE,EAAcC,mDAAaC,KAAK,SAAAlC,GAAC,OAAIA,EAAE1H,KAAOuJ,IAOlDvB,aANwB0B,GAAe,CACrC1J,GAAIuJ,EACJpJ,KAAMoJ,EACNrJ,KAAMqJ,GAGsB,CAC5BlB,KAAMnE,EAAUsF,IAAI,QACpBlB,mBAIFN,aAAa2B,mDAAa,OAOhC7H,SAAS+H,UAAY,SAAAC,IACnBA,EAAMA,GAAOxF,OAAOjD,OACZ0I,UAA4B,KAAhBD,EAAIE,UACtBnF,UACAiF,EAAIG,mBAIR,IAAMC,cAAgB,WACpB3G,mBAAmB,CACjBR,cAAc,EACdC,cAAc,EACdC,cAAc,KAIlB,OACEkH,2CAAAlF,EAAAmF,cAAA,OAAKC,UAAU,OACbF,2CAAAlF,EAAAmF,cAAA,cACED,2CAAAlF,EAAAmF,cAAA,OAAKC,UAAU,UACbF,2CAAAlF,EAAAmF,cAAA,OAAKC,UAAU,YACbF,2CAAAlF,EAAAmF,cAAA,OACEtJ,IAAI,aACJuJ,UAAU,OACVC,IAAI,0BAENH,2CAAAlF,EAAAmF,cAAA,OAAKC,UAAU,gBACbF,2CAAAlF,EAAAmF,cAAA,2CACAD,2CAAAlF,EAAAmF,cAACG,2DAAAtF,EAAD,CACEoF,UAAU,iBACVG,QAAOpH,OAAA2B,wKAAA,EAAA3B,CAAA4B,+JAAAC,EAAAC,KAAE,SAAAuF,IAAA,OAAAzF,+JAAAC,EAAAI,KAAA,SAAAqF,GAAA,cAAAA,EAAAlF,KAAAkF,EAAAjF,MAAA,cAAAiF,EAAA/C,OAAA,SAAYpE,mBAAmB,CAAEN,cAAc,KAA/C,wBAAAyH,EAAAnE,SAAAkE,OAFX,YAOFN,2CAAAlF,EAAAmF,cAAA,OAAKC,UAAU,gBACbF,2CAAAlF,EAAAmF,cAACO,yDAAA,EAAD,CACEC,kBAAmBtH,gBAAgBV,gBACnCiI,SAAU7C,aACV2B,aAAcA,uDAIpBQ,2CAAAlF,EAAAmF,cAAA,OAAKC,UAAU,aACbF,2CAAAlF,EAAAmF,cAAA,OAAKC,UAAU,kBACbF,2CAAAlF,EAAAmF,cAACU,2CAAA,EAAD,CACEC,QAAQ,cACRC,OAAQ5J,cACR6J,MAAOpJ,cACPqJ,QAASrJ,cACTsJ,KAAM,CACJC,OAAQ,IACRC,MAAO,IACPC,WAEE,CAAEC,eAAgB,EAAGC,IAAK,EAAGC,GAAI,MAGvCtB,2CAAAlF,EAAAmF,cAAA,4CAIND,2CAAAlF,EAAAmF,cAACsB,iDAAA,EAAD,CACEC,IAAK9G,QACL+G,MAAO,WACL5D,aAAa1E,gBAAgBV,gBAAiB,CAAE2F,WAAW,KAE7DsD,MAAO,WACL5H,kBACAV,mBAAmB,CAAER,cAAc,KAErC+I,KAAM,kBAAMvI,mBAAmB,CAAEP,cAAc,QAGnDmH,2CAAAlF,EAAAmF,cAAA,YACED,2CAAAlF,EAAAmF,cAAA,OAAKC,UAAU,iBACbF,2CAAAlF,EAAAmF,cAAA,OAAKC,UAAU,YACbF,2CAAAlF,EAAAmF,cAAC2B,gDAAA9G,EAAD,CACE+G,YAAY,iBACZC,KAAK,aACLC,MAAM,UACNC,KAAK,YAELC,SAAU,SAAA/D,GAAI,OAAI9E,mBAAmB,CAAEhB,SAAU8F,KACjDgE,SAAU,GACVhB,MAAM,OACND,OAAO,OACPkB,iBAAiB,EACjBC,YAAY,EACZC,qBAAqB,EACrBC,MAAOnJ,gBAAgBf,SACvBmK,WAAY,CACVC,2BAA2B,EAC3BC,0BAA0B,EAC1BC,gBAAgB,EAChBC,iBAAiB,EACjBC,QAAS,EACTC,WAAW,MAIjB7C,2CAAAlF,EAAAmF,cAAA,OAAKC,UAAU,YACbF,2CAAAlF,EAAAmF,cAAA,KAAGC,UAAU,gBAAgB/G,gBAAgBd,eAE/C2H,2CAAAlF,EAAAmF,cAAC6C,sDAAA,EAAD,CAAaC,QAAS5J,gBAAgBX,eAExCwH,2CAAAlF,EAAAmF,cAAA,OAAKC,UAAU,mBACbF,2CAAAlF,EAAAmF,cAAC+C,yCAAA,EAAD,KACEhD,2CAAAlF,EAAAmF,cAAC+C,yCAAA,EAAD,KACEhD,2CAAAlF,EAAAmF,cAAC+C,yCAAA,EAAD,sBACAhD,2CAAAlF,EAAAmF,cAAC+C,yCAAA,EAAD,sBAEFhD,2CAAAlF,EAAAmF,cAAC+C,yCAAA,EAAD,KACEhD,2CAAAlF,EAAAmF,cAACgD,kDAAA,EAAD,CAASC,OAAQ/J,gBAAgBZ,iBAEnCyH,2CAAAlF,EAAAmF,cAAC+C,yCAAA,EAAD,KACEhD,2CAAAlF,EAAAmF,cAACkD,sDAAA,EAAD,CACEC,MAAO,kBAAMhK,mBAAmB,CAAEL,cAAe,QAEnDiH,2CAAAlF,EAAAmF,cAAA,OAAKpK,GAAG,cAAcsD,gBAAgBJ,mBAK9CiH,2CAAAlF,EAAAmF,cAAA,cACED,2CAAAlF,EAAAmF,cAACoD,uDAAA,EAAD,OAEFrD,2CAAAlF,EAAAmF,cAACqD,qDAAA,EAAD,CACEC,OAAQpK,gBAAgBP,aACxB4K,UAAWzD,gBAEbC,2CAAAlF,EAAAmF,cAACwD,qDAAA,EAAD,CACEC,IAAI,aACJH,OAAQpK,gBAAgBN,aACxB2K,UAAWzD,cACX4D,YAAW,eAAAC,EAAA3K,OAAA2B,wKAAA,EAAA3B,CAAA4B,+JAAAC,EAAAC,KAAE,SAAA8I,EAAMC,GAAN,OAAAjJ,+JAAAC,EAAAI,KAAA,SAAA6I,GAAA,cAAAA,EAAA1I,KAAA0I,EAAAzI,MAAA,cAAAyI,EAAAzI,KAAA,EACLuC,aAAa1E,gBAAgBV,gBAAiB,CAClD0F,UAAW2F,IAFF,wBAAAC,EAAA3H,SAAAyH,MAAF,gBAAAG,GAAA,OAAAJ,EAAAtH,MAAAC,KAAAC,YAAA,KAMbwD,2CAAAlF,EAAAmF,cAACgE,qDAAA,EAAD,CACEV,OAAQpK,gBAAgBL,aACxB0K,UAAWzD,cACXmE,SAAU,SAAA9G,GAAG,OAAIS,aAAa,CAAEhI,GAAIuH,EAAKpH,KAAMoH,EAAKrH,KAAMqH,QAMnDnF,gFChaTkM,EAAU,SAACC,EAAWC,GAAZ,MACK,oBAAZA,EAAPpL,OAAAqL,EAAA,EAAArL,CAAA,GACSmL,EAAcC,EAAQD,IAD/BnL,OAAAqL,EAAA,EAAArL,CAAA,GAESmL,EAAcC,IAIVlM,IAFO,eAACoM,EAAD/H,UAAAkC,OAAA,QAAAC,IAAAnC,UAAA,GAAAA,UAAA,GAAgB,GAAhB,OAAuBgI,qBAAWL,EAASI,sCCPjE,IAAI5G,EAAMD,QAAQC,IAEHpI,EAAA,WAAAkP,GACb/G,QAAQC,IAAM,WACZA,EAAInB,WACJiI,EAAWjI,WACXmB,EAAIrB,MAAMqB,EAAKnB,+CCDJjH,EAAA,WAACmP,EAAazG,EAAYtF,EAAiBuF,GACxD,IAAIK,EACAoG,EAAa,CAAC,MA4BlB,OA1BIzG,EACFK,EAAYL,GAGZK,EAAS,0BAAAjE,OAA6B,MACtCiE,GAAS,MAAAjE,OAAUoK,EAAc,MAG7BzG,IACFM,GAAS,2BAAAjE,OAA+B2D,EAA/B,IAA6C,MACtD0G,EAAWC,KAAK,YAIdjM,EAAgBkM,QAClBtG,GAAS,aAAAjE,OAAiB3B,EAAgBkM,MAAjC,KAAAvK,OACP3B,EAAgBmL,KACf,MACHa,EAAWC,KAAK,UAGlBrG,GAAgB,KAAPjE,OAAA,IAAeqK,EAAW9K,KAAK,MAA/B,0CAAAS,OAEEqK,EA/BNG,SAAS,WACZ,iBACA,gCA2BO,QAKJvG,qCCnCT,IAAAwG,EAAA5O,EAAA,GAEeZ,EAAA,WAAAyP,GAoBb,OACED,EAAA,qBAAK7E,UAAU,gBACb6E,EAAA,cArBiB,SAAAC,GAAK,OACxBA,EAAMxF,aAAa9F,IAAI,SAAAuL,GACrB,IAAIC,EACFF,EAAMvE,mBAAqBuE,EAAMvE,kBAAkB5K,KAAOoP,EAAMpP,GAC5D,wBACA,YACN,OACEkP,EAAA,qBACErB,IAAKuB,EAAMpP,GACXA,GAAIoP,EAAMpP,GACVqK,UAAWgF,EACX7E,QAAS,kBAAM2E,EAAMtE,SAASuE,KAE9BF,EAAA,qBAAKpO,IAAKsO,EAAMnP,MAAOqK,IAAK8E,EAAMlP,OAClCgP,EAAA,0BAAOE,EAAMlP,UAOCiP,uCCxBxB,IAAAD,EAAA5O,EAAA,GAAAgP,EAAAhP,EAAA,KAGeZ,EAAA,WAAAoF,GAAiB,IAAdoI,EAAcpI,EAAdoI,QAAcqC,EAEwBrC,GAElD,CAAEsC,SAAU,EAAGC,WAAY,EAAGC,UAAW,EAAGtK,SAAU,CAAEuK,SAAU,IAF9DH,EAFsBD,EAEtBC,SAAUC,EAFYF,EAEZE,WAAYC,EAFAH,EAEAG,UAGxBE,EAAYF,EAAY,EAAI,EAAIA,EAChCG,EANwBN,EAEWnK,SAIjBuK,SAASG,QAAQ,GACzC,OACEZ,EAAA,qBAAKa,MAAOC,EAAOC,WACjBf,EAAA,oBAAIa,MAAOC,EAAOE,OAAlB,sBACAhB,EAAA,qBAAKa,MAAOC,EAAOG,QACjBjB,EAAA,qBAAKa,MAAOC,EAAOI,WACjBlB,EAAA,uBACEA,EAAA,0CADF,IAC+BmB,YAASb,GADxC,QAIFN,EAAA,qBAAKa,MAAOC,EAAOI,WACjBlB,EAAA,uBACEA,EAAA,4CADF,IACiCO,IAGnCP,EAAA,qBAAKa,MAAOC,EAAOI,WACjBlB,EAAA,uBACEA,EAAA,2CADF,IACgCmB,YAAST,GADzC,QAIFV,EAAA,qBAAKa,MAAOC,EAAOI,WACjBlB,EAAA,uBACEA,EAAA,0CADF,IAC+BW,EAD/B,WASV,IAAMG,EAAS,CACbC,UAAW,CACTK,gBAAiB,UACjBC,MAAO,QAETL,MAAO,CACLM,OAAQ,EACRC,aAAc,oBACdH,gBAAiB,UACjBI,UAAW,SACXrE,SAAU,OAEZ8D,OAAQ,CACNQ,QAAS,OACTC,WAAY,aACZC,cAAe,MACfC,SAAU,SACVzE,SAAU,SAEZ+D,UAAW,CAET/E,MAAO,OACPqF,UAAW,6CC7Df,IAAAxB,EAAA5O,EAAA,GAAAyQ,EAAAzQ,EAAA,IAAA0Q,EAAA1Q,EAAA,KAIeZ,EAAA,WAAAyP,GAAS,IAQlB8B,EARkBC,EAOlBlQ,WALFrB,EAFoBuR,EAEpBvR,SACAwR,EAHoBD,EAGpBC,WACAC,EAJoBF,EAIpBE,eACAC,EALoBH,EAKpBG,WACAC,EANoBJ,EAMpBI,QAaF,OAVID,IACFJ,EACE/B,EAAA,qBAAK7E,UAAU,WACb6E,EAAA,sBAAM7E,UAAU,eAAeiH,GAAWA,EAAQxR,YAClDoP,EAAA,sBAAMqC,KAAK,MAAMC,aAAW,UAA5B,YAOJtC,EAAA,qBAAKa,MAAOC,EAAOC,WACjBf,EAAA,oBAAIa,MAAOC,EAAOE,OAAlB,yBACAhB,EAAA,qBAAKa,MAAOC,EAAOG,QAChBc,EACD/B,EAAA,qBAAKa,MAAOC,EAAOI,WACjBlB,EAAA,uBACEA,EAAA,6CADF,IACkCmB,YAAS1Q,GAD3C,QAIFuP,EAAA,qBAAKa,MAAOC,EAAOI,WACjBlB,EAAA,uBACEA,EAAA,wCADF,IAC6BiC,IAG/BjC,EAAA,qBAAKa,MAAOC,EAAOI,WACjBlB,EAAA,uBACEA,EAAA,6CADF,IACkCkC,OAQ5C,IAAMpB,EAAS,CACbC,UAAW,CACTK,gBAAiB,UACjBC,MAAO,OACPG,UAAW,UAEbR,MAAO,CACLM,OAAQ,EACRC,aAAc,oBACdH,gBAAiB,UACjBjE,SAAU,OAEZ8D,OAAQ,CACNQ,QAAS,OACTC,WAAY,aACZC,cAAe,MACfC,SAAU,SACVzE,SAAU,SAEZ+D,UAAW,CAET/E,MAAO,8JC3DLoG,UAAU,CACd,CACEhF,MAAO,YACPuC,MAAO,aACP3E,UAAW,YACXrB,WAAW,GAEb,CACED,KAAM,QACNoD,KAAM,gBACNuF,MAAO,CACL,CACEjF,MAAO,cACPuC,MAAO,eACPf,KAAM,+BACN0D,KAAM,mCACNpK,IACE,0EACFyB,WAAW,EACXD,KAAM,SAER,CACE0D,MAAO,cACPuC,MAAO,eACPf,KAAM,+BACN0D,KAAM,kCACNpK,IAAK,kEACLyB,WAAW,EACXD,KAAM,SAER,CACE0D,MAAO,WACPuC,MAAO,YACPf,KAAM,+BACN0D,KAAM,mCACNpK,IAAK,kEACLyB,WAAW,EACXD,KAAM,WAIZ,CACEA,KAAM,QACNoD,KAAM,mBACNuF,MAAO,CACL,CACEjF,MAAO,SACPuC,MAAO,SACPf,KAAM,+BACN0D,KAAM,wCACNpK,IACE,wGACFyB,WAAW,EACXD,KAAM,cAMR6I,EAAc,SAAAC,GAMlB,OALgBJ,EACb5N,IAAI,SAAA6D,GAAC,OACJA,EAAE+E,MAAQ/E,EAAaA,EAAEgK,OAAShK,EAAEgK,MAAM7N,IAAI,SAAAiO,GAAC,OAAKA,EAAErF,MAAQqF,EAAI,SAEnEC,OACYnI,KAAK,SAAAlC,GAAC,OAAIA,EAAE+E,QAAUoF,KAGjCG,EAAW,SAAA7C,GACf,OAAIA,EAAM8C,KAEN9H,EAAAlF,EAAAmF,cAAA,OAAKC,UAAU,WAAWwD,IAAI,eAC5B1D,EAAAlF,EAAAmF,cAAA,KAAGC,UAAU,aAAb,QACAF,EAAAlF,EAAAmF,cAAA,SACErB,KAAK,OACLoD,KAAK,gBACL0B,IAAI,gBACJ7N,GAAG,aACHyM,MAAO0C,EAAM+C,SACb9F,SAAU+C,EAAMgD,eAKfhI,EAAAlF,EAAAmF,cAAA,aAII1K,EAAA,WAAAyP,GAAS,IAAAiD,EACkBC,mBAAS,IAD3BC,EAAAlP,OAAAC,EAAA,EAAAD,CAAAgP,EAAA,GACfG,EADeD,EAAA,GACDE,EADCF,EAAA,GAAAG,EAEUJ,mBAAS,IAFnBK,EAAAtP,OAAAC,EAAA,EAAAD,CAAAqP,EAAA,GAEfP,EAFeQ,EAAA,GAELC,EAFKD,EAAA,GAIhBE,EAAiB,SAAA9N,GAAe,IAAZ2H,EAAY3H,EAAZ2H,MAClBoG,EAAWjB,EAAYnF,GAC7B+F,EAAgBK,IAmDlB,OACE1I,EAAAlF,EAAAmF,cAAC0I,EAAA7N,EAAD,CACE4I,IAAI,kBACJH,OAAQyB,EAAMzB,OACdqF,eAAgB5D,EAAMxB,UACtBqF,2BAA2B,EAC3BC,qBAAqB,EACrBC,eAAgB,IAChB7I,UAAU,QACV8I,iBAAiB,UACjBC,aAAa,eAEbjJ,EAAAlF,EAAAmF,cAAA,OAAKC,UAAU,YACbF,EAAAlF,EAAAmF,cAAA,OAAKC,UAAU,YACbF,EAAAlF,EAAAmF,cAAA,0BAEFD,EAAAlF,EAAAmF,cAAA,OAAKC,UAAU,cACbF,EAAAlF,EAAAmF,cAAA,UAAQC,UAAU,YAAYG,QAAS2E,EAAMxB,WAA7C,kBAKJxD,EAAAlF,EAAAmF,cA9Da,SAAA+E,GACf,OAAIA,EAAMzB,OAENvD,EAAAlF,EAAAmF,cAAA,OAAKC,UAAU,YACbF,EAAAlF,EAAAmF,cAAA,OAAKC,UAAU,qBACbF,EAAAlF,EAAAmF,cAACiJ,EAAApO,EAAD,CACEoF,UAAU,WACV2B,YAAY,iBACZyF,QAASA,EACTrF,SAAUwG,EACVnG,MAAO8F,EAAa9F,SAGxBtC,EAAAlF,EAAAmF,cAAA,OAAKC,UAAU,cACbF,EAAAlF,EAAAmF,cAACkJ,EAAArO,EAAD,CACEoF,UAAU,sBACVG,QAAOpH,OAAA2B,EAAA,EAAA3B,CAAA4B,EAAAC,EAAAC,KAAE,SAAAW,IAAA,OAAAb,EAAAC,EAAAI,KAAA,SAAAW,GAAA,cAAAA,EAAAR,KAAAQ,EAAAP,MAAA,cAAAO,EAAAP,KAAA,EACD0J,EAAMrB,YAAYyE,GADjB,wBAAAvM,EAAAO,SAAAV,MAGT0N,UAAWpE,EAAMxB,UACjB6F,QAAS,SAAArS,GAAC,OAAImD,OAAOmP,MAAMtS,EAAEmF,WAN/B,UAeJ6D,EAAAlF,EAAAmF,cAAA,cACED,EAAAlF,EAAAmF,cAAA,UACED,EAAAlF,EAAAmF,cAAA,QAAMmH,KAAK,MAAMC,aAAW,QAA5B,mBA+BQrC,GACdhF,EAAAlF,EAAAmF,cAAC4H,EAAD,CACEnE,IAAI,oBACJoE,KAA6B,cAAvBM,EAAa9F,MACnByF,SAAUA,EACVC,YA3Ec,SAAA5C,GAAgB,IAAbhO,EAAagO,EAAbhO,OACrBoR,EAAYpR,EAAOkL,OACnB,IAAIoG,EAAWjB,EAAY,aAC3BiB,EAAStL,IAAMhG,EAAOkL,MACtBoG,EAAS5E,KAAO1M,EAAOkL,MACvB+F,EAAgBK,MAwEd1I,EAAAlF,EAAAmF,cAAA,WACED,EAAAlF,EAAAmF,cAAA,KAAGsJ,KAAMnB,EAAaZ,KAAMpQ,OAAO,SAASiK,IAAI,uBAC7C+G,EAAaZ,wFC9KlBgC,EAAW,SAAAxE,GAAS,IAAAiD,EACQC,mBAAS,IADjBC,EAAAlP,OAAAwQ,EAAA,EAAAxQ,CAAAgP,EAAA,GACjByB,EADiBvB,EAAA,GACPwB,EADOxB,EAAA,GAAAG,EAEQJ,oBAAS,GAFjBK,EAAAtP,OAAAwQ,EAAA,EAAAxQ,CAAAqP,EAAA,GAEjBsB,EAFiBrB,EAAA,GAEPsB,EAFOtB,EAAA,GAGxB,OAAIvD,EAAMzB,OAENuG,EAAAhP,EAAAmF,cAAA,OAAKC,UAAU,YACb4J,EAAAhP,EAAAmF,cAAA,OAAKC,UAAU,YACb4J,EAAAhP,EAAAmF,cAAA,SACErB,KAAK,OACLsB,UAAU,WACVoC,MAAOoH,EACPzH,SAAU,SAAAtH,GAAgB,IAAbvD,EAAauD,EAAbvD,OACXuS,EAAYvS,EAAOkL,OACnBuH,EAhBG,OAgBoBzS,EAAOkL,MAnBzByH,MACf,2GAsBID,EAAAhP,EAAAmF,cAAA,OAAKC,UAAU,cACb4J,EAAAhP,EAAAmF,cAAA,UACE+J,UAAWJ,EACX1J,UAAU,cACVG,QAAS,WACP2E,EAAMd,SAASwF,GACf1E,EAAMxB,cALV,SAeJsG,EAAAhP,EAAAmF,cAAA,cACE6J,EAAAhP,EAAAmF,cAAA,UACE6J,EAAAhP,EAAAmF,cAAA,QAAMmH,KAAK,MAAMC,aAAW,QAA5B,mBASK9R,EAAA,WAAAyP,GAAK,OAClB8E,EAAAhP,EAAAmF,cAACgK,EAAAnP,EAAD,CACEyI,OAAQyB,EAAMzB,OACdqF,eAAgB5D,EAAMxB,UACtBqF,2BAA2B,EAC3BC,qBAAqB,EACrBC,eAAgB,IAChB7I,UAAU,QACV8I,iBAAiB,UACjBC,aAAa,eAEba,EAAAhP,EAAAmF,cAAA,OAAKC,UAAU,YACb4J,EAAAhP,EAAAmF,cAAA,OAAKC,UAAU,YACb4J,EAAAhP,EAAAmF,cAAA,gCAEF6J,EAAAhP,EAAAmF,cAAA,OAAKC,UAAU,cACb4J,EAAAhP,EAAAmF,cAAA,UAAQC,UAAU,YAAYG,QAAS2E,EAAMxB,WAA7C,kBAKJsG,EAAAhP,EAAAmF,cAACuJ,EAAaxE,uCC7ElB,IAAAD,EAAA5O,EAAA,GAAA+T,EAAA/T,EAAAgU,EAAApF,GAAAqF,EAAAjU,EAAA,IAAAkU,EAAAlU,EAAA,IAAAmU,EAAAnU,EAAA,KAcMoU,EADcC,EAAQ,KACEC,aAAa,oBAAoB7U,QAC7D,aACA,IAGaL,EAAA,WAAAyP,GAAK,OAClBkF,EAAApP,EAAAmF,cAAA,OAAKpK,GAAG,UACNqU,EAAApP,EAAAmF,cAAA,OAAKC,UAAU,YACbgK,EAAApP,EAAAmF,cAAA,UACE8F,MAAM,2BACN7F,UAAU,YACVrK,GAAG,MACHwK,QAAS2E,EAAMxD,KAEf0I,EAAApP,EAAAmF,cAACmK,EAAA,EAAD,CAAiBM,KAAMC,MANzB,QAQAT,EAAApP,EAAAmF,cAAA,UACE8F,MAAM,aACN7F,UAAU,YACVrK,GAAG,QACHwK,QAAS2E,EAAMvD,OAEfyI,EAAApP,EAAAmF,cAACmK,EAAA,EAAD,CAAiBM,KAAME,MANzB,UAQAV,EAAApP,EAAAmF,cAAA,UACE8F,MAAM,wBACN7F,UAAU,YACVrK,GAAG,QACHwK,QAAS2E,EAAMtD,OAEfwI,EAAApP,EAAAmF,cAACmK,EAAA,EAAD,CAAiBM,KAAMG,MANzB,UAQAX,EAAApP,EAAAmF,cAAA,UACE8F,MAAM,yBACN7F,UAAU,YACVrK,GAAG,OACHwK,QAAS2E,EAAMrD,MAEfuI,EAAApP,EAAAmF,cAACmK,EAAA,EAAD,CAAiBM,KAAMI,MANzB,gBASFZ,EAAApP,EAAAmF,cAAA,OAAKC,UAAU,aACbgK,EAAApP,EAAAmF,cAACmK,EAAA,EAAD,CAAiBM,KAAMK,MAAe,IACtCb,EAAApP,EAAAmF,cAAA,KACEC,UAAU,UACVqJ,KAAI,iCAAAjP,OAAmCiQ,EAAnC,KACJnT,OAAO,SACPiK,IAAI,uBAJN,sBAQA6I,EAAApP,EAAAmF,cAACmK,EAAA,EAAD,CAAiBM,KAAMM,MAAa,IACpCd,EAAApP,EAAAmF,cAAA,KACEC,UAAU,UACVqJ,KAAK,kDACLnS,OAAO,SACPiK,IAAI,uBAJN,UAQA6I,EAAApP,EAAAmF,cAACmK,EAAA,EAAD,CAAiBM,KAAMO,MAAiB,IACxCf,EAAApP,EAAAmF,cAAA,KACEC,UAAU,UACVqJ,KAAK,uCACLnS,OAAO,SACPiK,IAAI,uBAJN,8CC3EN,IAAA0D,EAAA5O,EAAA,GAAA+T,EAAA/T,EAAAgU,EAAApF,GAAAqF,EAAAjU,EAAA,IAAAkU,EAAAlU,EAAA,IAKeZ,EAAA,WAAAyP,GAAK,OAClBkF,EAAApP,EAAAmF,cAAA,UACE8F,MAAM,gBACNH,MAAO,CAAEsF,MAAO,SAChBhL,UAAU,YACVrK,GAAG,eACHwK,QAAS2E,EAAM5B,OAEf8G,EAAApP,EAAAmF,cAACmK,EAAA,EAAD,CAAiBM,KAAMS,MAPzB,kHCFIC,EAAiB,SAAAC,GACrB,IAAIC,EAAMC,OAAOF,GAAG1V,SAAS,IAI7B,OAHI2V,EAAI5M,OAAS,IACf4M,EAAM,IAAMA,GAEPA,GAGHE,EAAa,SAACC,EAAKC,GACvB,IAAIC,EAAGC,EAAGC,EAEV,GAAmB,IAAfJ,EAAI/M,OACNiN,EAAIF,EAAI,GACRG,EAAIH,EAAI,GACRI,EAAIJ,EAAI,OACH,KAAAK,EAAA7S,OAAA8S,EAAA,EAAA9S,CACQwS,EADR,GACHE,EADGG,EAAA,GACAF,EADAE,EAAA,GACGD,EADHC,EAAA,GAUP,MALmB,YAAfJ,IACFC,EAAIlW,KAAKC,MAAU,IAAJiW,GACfC,EAAInW,KAAKC,MAAU,IAAJkW,GACfC,EAAIpW,KAAKC,MAAU,IAAJmW,IAEV,IAAMT,EAAeO,GAAKP,EAAeQ,GAAKR,EAAeS,IAGhEG,EAAa,SAAAhH,GAAK,OACtBiH,EAAA,qBAAKrG,MAAO,CAAEY,QAAS,OAAQE,cAAe,QAC5CuF,EAAA,qBACErG,MAAO,CACLsG,YAAa,OACbhL,MAAO,OACPD,OAAQ,OACRkL,OAAQ,kBACRhG,gBAAiBnB,EAAMoB,SAG1BpB,EAAMoB,QAILgG,EAAc,SAACC,EAASnJ,GAC5B,GAAIA,EAAQ,CACV,IAAMoJ,EAAS,uCAAAhS,OACA4I,EAAOqJ,SADP,kBAAAjS,OAEN4I,EAAOzF,MAFD,+CAAAnD,OAGF4I,EAAOzF,MAAM,GAHX,eAAAnD,OAIb4I,EAAOzF,MAAM,GAJA,6BAAAnD,OAKa4I,EAAOsJ,MALpB,YAAAlS,OAKoC4I,EAAOzF,MAAM,GALjD,yBAAAnD,OAON4I,EAAOvN,WAPD,UASf0W,EAAQ/J,MAAQgK,IAIdG,EAAe,SAAA9R,GAAiB,IAIhC+R,EAJkBC,EAAchS,EAAdgS,QAEtB,IAAKA,EAAS,OAAO,KAGrB,IAAMC,EAAU/V,OAAQ,WAEtB,IAAMoK,EAAS0L,EAAQlP,MAAM,GACvByD,EAAQyL,EAAQlP,MAAM,GAC5BiP,EAAeC,EAAQlP,MAAM,GAE7B,IAAMoP,EAAKhW,QAAS8V,EAAS,CAAC,EAAG,EAAG,GAAI,CAAC,EAAG,EAAGD,IACzCI,EAAKjW,QAAS8V,EAAS,CAAC,EAAGzL,EAAQ,EAAG,GAAI,CAAC,EAAG,EAAGwL,IACjDK,EAAKlW,QAAS8V,EAAS,CAAC1L,EAAS,EAAG,EAAG,GAAI,CAAC,EAAG,EAAGyL,IAClDM,EAAKnW,QACT8V,EACA,CAAC1L,EAAS,EAAGC,EAAQ,EAAG,GACxB,CAAC,EAAG,EAAGwL,IAGT,OAAO7V,QAAS,CAACgW,EAAIC,EAAIC,EAAIC,MAGzBC,EAASL,EAAQM,WACjBC,EAAMjQ,MAAMkQ,KAAKH,GACvBL,EAAQ3Q,UAGR,IADA,IAAIoR,EAAS,GACNF,EAAIzO,QAAQ2O,EAAOzI,KAAKuI,EAAIG,OAAO,EAAGZ,IAC7C,IAAMhB,EAAaiB,EAAQH,MAE3B,OACEP,EAAA,oBAAIrG,MAAOC,EAAO0H,WAChBtB,EAAA,0CACiBA,EAAA,cAACuB,EAAD,CAAYpH,MAAOoF,EAAW6B,EAAO,GAAI3B,MAE1DO,EAAA,4CACoB,IAClBA,EAAA,cAACuB,EAAD,CAAYpH,MAAOoF,EAAW6B,EAAO,GAAI3B,MAE3CO,EAAA,2CACkBA,EAAA,cAACuB,EAAD,CAAYpH,MAAOoF,EAAW6B,EAAO,GAAI3B,MAE3DO,EAAA,6CACqB,IACnBA,EAAA,cAACuB,EAAD,CAAYpH,MAAOoF,EAAW6B,EAAO,GAAI3B,QAMlC+B,EAAA,SAAAzI,GACb,IAAKA,EAAM9B,OAAQ,OAAO,KAC1B,IAAMwK,EAAgBC,iBAAO,MACvBC,EAAaD,iBAAO,MAa1B,OAXAE,oBAAU,YACW,eAAAzI,EAAAnM,OAAA6U,EAAA,EAAA7U,CAAA8U,EAAAjT,EAAAC,KAAG,SAAAW,IAAA,OAAAqS,EAAAjT,EAAAI,KAAA,SAAAW,GAAA,cAAAA,EAAAR,KAAAQ,EAAAP,MAAA,WAChB0J,EAAM9B,OADU,CAAArH,EAAAP,KAAA,eAElB8Q,EAAYwB,EAAWI,QAAShJ,EAAM9B,QAFpBrH,EAAAP,KAAA,EAGZzE,UAAWoX,SAASjJ,EAAM9B,OAAQwK,EAAcM,SAHpC,OAIdhJ,EAAMkJ,cAAclJ,EAAM9B,OAAOjH,UAJnB,wBAAAJ,EAAAO,SAAAV,MAAH,yBAAA0J,EAAA9I,MAAAC,KAAAC,aAAA,EAOnB2R,IACC,CAACnJ,EAAM9B,SAGR+I,EAAA,qBAAKrG,MAAOC,EAAOC,WACjBmG,EAAA,wBAAQrG,MAAOC,EAAOuI,OAAQC,IAAKX,IACnCzB,EAAA,qBAAKrG,MAAOC,EAAOyI,QACjBrC,EAAA,qBAAKrG,MAAOC,EAAO0I,YACjBtC,EAAA,cAACuC,EAAD,CAAc7B,QAAS3H,EAAM9B,UAE/B+I,EAAA,qBAAKrG,MAAOC,EAAO4I,aACjBxC,EAAA,0BAAUrG,MAAOC,EAAO6I,YAAaL,IAAKT,EAAYe,UAAQ,GAC3D3J,EAAM4J,UAQb/I,EAAS,CACbC,UAAW,CACTU,QAAS,OACTE,cAAe,SACfzF,OAAQ,QAEVqN,OAAQ,CACN9H,QAAS,OACTqI,eAAgB,gBAChB5N,OAAQ,OACRiL,YAAa,OAEfqC,WAAY,GAIZE,YAAa,CACXjI,QAAS,OACTE,cAAe,SACfoI,KAAM,GAERJ,YAAa,CACXK,SAAU,QACVvI,QAAS,OACTwI,SAAU,EACV9N,MAAO,OACPiF,gBAAiB,UACjBC,MAAO,UACPlE,SAAU,MACV+M,WAAY,aAEd1B,UAAW,CACT2B,QAAS,EACT3I,UAAW,OACX4I,UAAW,OACXC,QAAS,OACT/I,OAAQ,EACRD,MAAO,SAETgI,OAAQ,CACNiB,SAAU,OACVC,UAAW,wDCnLAC,EAAA,SAAAvK,GAAK,OAClBwK,EAAA1U,EAAAmF,cAACwP,EAAA,EAAD,CAAc1N,MAAO2N,IAAaC,SAAUP,QAAS,IACnDI,EAAA1U,EAAAmF,cAAC2P,EAAA,EAAD,CACEC,SAAS,EACTjK,MAAO,CACLkK,OAAQ,CACN3D,OAAQ,kBAEVvP,KAAM,CACJmT,KAAM,WAERC,OAAQ,CACN9N,SAAU,GACV6N,KAAM,UACNX,QAAS,KAGbY,OAAQ,SAAAC,GAAO,OAAIA,EAAQtI,GAC3BuI,eAAgBV,EAAA1U,EAAAmF,cAACkQ,EAAA,EAAD,CAAcC,GAAI,KAClCC,KAAM,EACNzT,KAAMoI,EAAMsL,cCMH/a,EAAA,WAAAyP,GAAS,IACd9B,EAAW8B,EAAX9B,OACR,OAAKA,EAE0B,MAApBA,EAAOqJ,SAEdiD,EAAA1U,EAAAmF,cAAA,OAAKC,UAAU,uBACbsP,EAAA1U,EAAAmF,cAAA,2BACAuP,EAAA1U,EAAAmF,cAAA,WAAMiD,EAAOvN,aAGY,MAApBuN,EAAOqJ,SAEdiD,EAAA1U,EAAAmF,cAAA,OAAKC,UAAU,uBACbsP,EAAA1U,EAAAmF,cAAA,2BACAuP,EAAA1U,EAAAmF,cAAA,WAAMiD,EAAOvN,YA3CF,SAAA4a,GACjB,IAAIC,EAEJ,GAA0B,IAAtBD,EAAS9S,MAAM,GAAU,CAC3B+S,EAAY,GAEZ,IADA,IAAMC,EAASF,EAASrD,WACfwD,EAAI,EAAGA,EAAIH,EAASF,KAAMK,GAAK,EACtCF,EAAU5L,KAAK,CACbrH,EAAGkT,EAAOC,GACV/I,EAAG8I,EAAOC,EAAI,UAGb,GAA0B,IAAtBH,EAAS9S,MAAM,GAAU,CAClC+S,EAAY,GAGZ,IAFA,IAAMC,EAASF,EAASrD,WAClByD,EAAWJ,EAAS9S,MAAM,GACvBiT,EAAI,EAAGA,EAAIC,EAAUD,IAC5BF,EAAU5L,KAAK,CACbrH,EAAGkT,EAAOC,GACV/I,EAAG8I,EAAOC,EAAIC,KAIpB,GAAIH,EACF,OAAOhB,EAAA1U,EAAAmF,cAACsP,EAAD,CAAae,UAAWE,IAoB1BI,CAAW1N,IAGa,MAApBA,EAAOqJ,SACTiD,EAAA1U,EAAAmF,cAACwN,EAAD,CAAsBvK,OAAQA,IACR,MAApBA,EAAOqJ,SAEdiD,EAAA1U,EAAAmF,cAAA,WACEuP,EAAA1U,EAAAmF,cAAA,MAAI2F,MAAO,CAAEiL,YAAa,KACvB3N,EAAOzF,MAAM,GADhB,0BAGC5G,UAAWqM,GAAQxJ,IAAI,SAAAoX,GAAC,OACvBtB,EAAA1U,EAAAmF,cAACwN,EAAD,CAAsBvK,OAAQ4N,EAAG5C,cAAY,OAMjDsB,EAAA1U,EAAAmF,cAAA,OAAKC,UAAU,uBACbsP,EAAA1U,EAAAmF,cAAA,WAAMrG,EAAUsJ,EAAQ,KAAM,KAhC3B,8GC/BL6N,EAAQ,WAAIC,aAAYC,oDAAYC,sBAAuB,IAE3D1H,EAAW,SAAAxE,GAAS,IAAAiD,EACUC,mBAAS/N,OAAOI,SAASgP,MADnCpB,EAAAlP,OAAA8S,EAAA,EAAA9S,CAAAgP,EAAA,GACjBkJ,EADiBhJ,EAAA,GACNiJ,EADMjJ,EAAA,GAYxB,OARA0F,oBAAU,YACU,eAAAlT,EAAA1B,OAAA6U,EAAA,EAAA7U,CAAA8U,EAAAjT,EAAAC,KAAG,SAAAW,IAAA,IAAA2V,EAAA,OAAAtD,EAAAjT,EAAAI,KAAA,SAAAW,GAAA,cAAAA,EAAAR,KAAAQ,EAAAP,MAAA,cAAAO,EAAAP,KAAA,EACKyV,EAAMO,QAAQnX,OAAOI,SAASgP,MADnC,OACb8H,EADaxV,EAAAQ,KAEnB+U,EAAaC,EAAUjU,KAFJ,wBAAAvB,EAAAO,SAAAV,MAAH,yBAAAf,EAAA2B,MAAAC,KAAAC,aAAA,EAIlB+U,IACC,IAECvM,EAAMzB,OAENiM,EAAA1U,EAAAmF,cAAA,OAAKC,UAAU,YACbsP,EAAA1U,EAAAmF,cAAA,OAAKC,UAAU,YACbsP,EAAA1U,EAAAmF,cAAA,SAAOrB,KAAK,OAAO0D,MAAO6O,EAAWjR,UAAU,WAAWyO,UAAQ,KAEpEa,EAAA1U,EAAAmF,cAAA,OAAKC,UAAU,cACbsP,EAAA1U,EAAAmF,cAAA,UACEC,UAAU,cACVG,QAAS,WACP,KC7BC,SAAAmR,GACb,IAAMC,EAAK9Z,SAASsI,cAAc,YAClCwR,EAAGnP,MAAQkP,EACXC,EAAGC,aAAa,WAAY,IAC5BD,EAAG7L,MAAM+L,SAAW,WACpBF,EAAG7L,MAAMgM,KAAO,UAChBja,SAASka,KAAKC,YAAYL,GAC1B,IAAM/I,EACJ/Q,SAASoa,eAAeC,WAAa,GACjCra,SAASoa,eAAeE,WAAW,GAEzCR,EAAGS,SACHva,SAASwa,YAAY,QACrBxa,SAASka,KAAKO,YAAYX,GACtB/I,IAEF/Q,SAASoa,eAAeM,kBACxB1a,SAASoa,eAAeO,SAAS5J,IDarB6J,CAAgBpB,GAChB,MAAOna,GACP,MAAMA,EAERgO,EAAMxB,cARV,UAkBJgM,EAAA1U,EAAAmF,cAAA,cACEuP,EAAA1U,EAAAmF,cAAA,UACEuP,EAAA1U,EAAAmF,cAAA,QAAMmH,KAAK,MAAMC,aAAW,QAA5B,mBASK9R,EAAA,WAAAyP,GAAK,OAClBwK,EAAA1U,EAAAmF,cAACuS,EAAA1X,EAAD,CACEyI,OAAQyB,EAAMzB,OACdqF,eAAgB5D,EAAMxB,UACtBqF,2BAA2B,EAC3BC,qBAAqB,EACrBC,eAAgB,IAChB7I,UAAU,QACV8I,iBAAiB,UACjBC,aAAa,eAEbuG,EAAA1U,EAAAmF,cAAA,OAAKC,UAAU,YACbsP,EAAA1U,EAAAmF,cAAA,OAAKC,UAAU,YACbsP,EAAA1U,EAAAmF,cAAA,0BAEFuP,EAAA1U,EAAAmF,cAAA,OAAKC,UAAU,cACbsP,EAAA1U,EAAAmF,cAAA,UAAQC,UAAU,YAAYG,QAAS2E,EAAMxB,WAA7C,kBAKJgM,EAAA1U,EAAAmF,cAACwS,EAADxZ,OAAAyZ,OAAA,GAAc1N,EAAd,CAAqBwC,KAAM,khDEjEXmL,QACW,cAA7BxY,OAAOI,SAASqY,UAEe,UAA7BzY,OAAOI,SAASqY,UAEhBzY,OAAOI,SAASqY,SAAS7I,MACvB,2DCZN8I,IAASC,OAAOtD,EAAA1U,EAAAmF,cAAChI,EAAA,EAAD,MAASN,SAASob,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.1cdccc9e.chunk.js","sourcesContent":["const numberWithCommas = x => x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')\r\n\r\nexport default numBytes => numberWithCommas(Math.round(numBytes / 1024))\r\n","export default [\r\n  {\r\n    id: 'bella',\r\n    thumb: './bella_thumb.jpg',\r\n    desc: 'RGB Tensor',\r\n    full: './bella.jpg',\r\n    channels: 3\r\n  },\r\n  {\r\n    id: 'italy',\r\n    thumb: './italy_thumb.jpg',\r\n    desc: 'Monochrome Tensor',\r\n    full: './italy.jpg',\r\n    channels: 1\r\n  },\r\n  {\r\n    id: 'batch',\r\n    thumb: './batch_thumb.jpg',\r\n    desc: 'RGB Image Batch',\r\n    full: ['./batch1.jpg', './batch2.jpg', './batch3.jpg'],\r\n    channels: 3\r\n  },\r\n  {\r\n    id: 'none',\r\n    thumb: './null_thumb.png',\r\n    desc: 'No Input Tensor',\r\n    full: null,\r\n    channels: 0\r\n  }\r\n]\r\n","import * as tf from '@tensorflow/tfjs'\r\n\r\nexport default (imageURL, channels) => {\r\n  return new Promise((resolve, reject) => {\r\n    const img = new Image()\r\n    img.crossOrigin = 'anonymous'\r\n    img.src = imageURL\r\n    img.onload = () => {\r\n      resolve(tf.browser.fromPixels(img, channels))\r\n    }\r\n    img.onerror = e => {\r\n      reject(e)\r\n    }\r\n  })\r\n}\r\n","import React from 'react'\r\nimport './App.css'\r\nimport * as tf from '@tensorflow/tfjs'\r\nimport YouTube from 'react-youtube'\r\nimport * as stringify from 'json-stringify-safe'\r\n// Awesome button\r\nimport ProgressButton from 'react-progress-button'\r\nimport '../node_modules/react-progress-button/react-progress-button.css'\r\n\r\n// Code editor & styles\r\nimport AceEditor from 'react-ace'\r\nimport 'brace'\r\nimport 'brace/mode/javascript'\r\nimport 'brace/theme/dracula'\r\n\r\n// Tabs and style\r\nimport { Tab, Tabs, TabList, TabPanel } from 'react-tabs'\r\nimport 'react-tabs/style/react-tabs.css'\r\n\r\n// merge state custom hook\r\nimport useMergeState from './lib/useMergeState'\r\nimport convertURLToTensor from './lib/convertURLtoTensor'\r\nimport addToConsoleLog from './lib/addToConsoleLog'\r\nimport startCodeCreator from './lib/startCodeCreator'\r\n// Custom components\r\nimport TensorSelector from './components/tensorSelector'\r\nimport CodeProfile from './components/codeProfile'\r\nimport MemoryStatus from './components/memoryStatus'\r\nimport Results from './components/results'\r\nimport ShareModal from './components/shareModal'\r\nimport ModelModal from './components/modelModal'\r\nimport InputModal from './components/inputModal'\r\nimport RunNav from './components/runNav'\r\nimport ClearButton from './components/clearButton'\r\n// Input Tensor info etc.\r\nimport inputTensors from './data/inputTensors'\r\n\r\nconst playExplainer = event => {\r\n  const iframe = event.target.getIframe()\r\n  // fullscreen it\r\n  const requestFullScreen =\r\n    iframe.requestFullScreen ||\r\n    iframe.mozRequestFullScreen ||\r\n    iframe.webkitRequestFullScreen\r\n  if (requestFullScreen) {\r\n    requestFullScreen.bind(iframe)()\r\n  }\r\n}\r\n\r\nconst stopExplainer = () => {\r\n  if (document.fullscreen)\r\n    document.exitFullscreen\r\n      ? document.exitFullscreen()\r\n      : document.msExitFullscreen\r\n      ? document.msExitFullscreen()\r\n      : document.mozCancelFullScreen\r\n      ? document.mozCancelFullScreen()\r\n      : document.webkitExitFullscreen && document.webkitExitFullscreen()\r\n}\r\n\r\nfunction App() {\r\n  const [sandboxSettings, setSandboxSettings] = useMergeState({\r\n    userCode: '',\r\n    currentError: null,\r\n    activeTensor: null,\r\n    displayTensor: null,\r\n    codeProfile: null,\r\n    inputTensorInfo: null,\r\n    activeModel: null,\r\n    activeModelInfo: {},\r\n    shareVisible: false,\r\n    modelVisible: false,\r\n    inputVisible: false,\r\n    consoleOutput: ''\r\n  })\r\n\r\n  // Jump in on console.log and grab it\r\n  addToConsoleLog(args => {\r\n    // Converts args into regular array\r\n    const arrayArgs = [].slice.call(args)\r\n    // switch objects to string version of that object\r\n    const arrayStyleArgs = arrayArgs.map(arg =>\r\n      typeof arg === 'object' ? stringify(arg, null, 2) : arg\r\n    )\r\n    // breaks multiple args into newlines\r\n    const allThings = '\\n' + arrayStyleArgs.join('\\n')\r\n    setSandboxSettings({\r\n      consoleOutput: sandboxSettings.consoleOutput + allThings\r\n    })\r\n  })\r\n\r\n  const sharePlayground = () => {\r\n    const { userCode, inputTensorInfo, activeModelInfo } = sandboxSettings\r\n    let urlParams = new URLSearchParams()\r\n    urlParams.append('code', userCode)\r\n    urlParams.append('inputTensor', inputTensorInfo.id)\r\n    urlParams.append('modelInfo', JSON.stringify(activeModelInfo))\r\n    if (window.history.replaceState) {\r\n      window.history.replaceState(\r\n        'code',\r\n        'Tensor Playground',\r\n        `${window.location.origin}${window.location.pathname}?${urlParams}`\r\n      )\r\n    }\r\n  }\r\n\r\n  const runCode = async () => {\r\n    try {\r\n      sharePlayground() // update URL\r\n      let codeProfile\r\n      const timeInfo = await tf.time(async () => {\r\n        codeProfile = await tf.profile(async () => {\r\n          try {\r\n            const resultTensor = tf.tidy(() => {\r\n              const userFunc = eval(sandboxSettings.userCode)\r\n              return userFunc(\r\n                tf,\r\n                sandboxSettings.activeTensor,\r\n                sandboxSettings.activeModel\r\n              )\r\n            })\r\n            // Error if sandbox was empty\r\n            if (!resultTensor) {\r\n              tf.disposeVariables()\r\n              throw new Error('Nothing was returned from the sandbox!')\r\n            }\r\n            // dispose current display if not used\r\n            if (\r\n              resultTensor !== sandboxSettings.displayTensor &&\r\n              sandboxSettings.displayTensor !== sandboxSettings.activeTensor\r\n            )\r\n              sandboxSettings.displayTensor &&\r\n                sandboxSettings.displayTensor.dispose &&\r\n                sandboxSettings.displayTensor.dispose()\r\n            setSandboxSettings({\r\n              displayTensor: resultTensor,\r\n              currentError: null\r\n            })\r\n          } catch (e) {\r\n            setSandboxSettings({ currentError: e.message, displayTensor: null })\r\n          }\r\n        })\r\n      })\r\n      if (codeProfile) codeProfile.timeInfo = timeInfo\r\n      setSandboxSettings({ codeProfile })\r\n    } catch (e) {\r\n      setSandboxSettings({ currentError: e.message, displayTensor: null })\r\n    }\r\n  }\r\n\r\n  const tensorize = async data => {\r\n    const { full, channels } = data\r\n\r\n    try {\r\n      // pre-cleanup\r\n      tf.disposeVariables()\r\n      let tensorResult\r\n      if (Array.isArray(full)) {\r\n        const promiseArray = full.map(url => convertURLToTensor(url, channels))\r\n        const tensors = await Promise.all(promiseArray)\r\n        // Create batch tensor\r\n        tensorResult = tf.stack(tensors)\r\n        // reclaim original tensor memory\r\n        tensors.map(x => x.dispose())\r\n      } else if (!full) {\r\n        tensorResult = null\r\n      } else {\r\n        tensorResult = await convertURLToTensor(full, channels)\r\n      }\r\n      let previousActive = sandboxSettings.activeTensor\r\n      sandboxSettings.displayTensor &&\r\n        sandboxSettings.displayTensor.dispose &&\r\n        sandboxSettings.displayTensor.dispose()\r\n      setSandboxSettings({\r\n        activeTensor: tensorResult,\r\n        displayTensor: null,\r\n        currentError: null\r\n      })\r\n      if (previousActive) previousActive.dispose()\r\n      return tensorResult && tensorResult.shape\r\n    } catch (e) {\r\n      setSandboxSettings({ currentError: `Unable to load: ${full}` })\r\n      console.log(e.message)\r\n    }\r\n  }\r\n\r\n  const setupSandbox = async (data, settings = {}) => {\r\n    // kickoff tensorization of input\r\n    const inputShape = await tensorize(data)\r\n    const { code, modelInfo, killModel } = settings\r\n    let model = sandboxSettings.activeModel\r\n    let activeModelInfo = modelInfo\r\n      ? modelInfo\r\n      : sandboxSettings.activeModelInfo\r\n\r\n    if (killModel) {\r\n      // cleanup\r\n      if (model) tf.dispose(model)\r\n      model = null\r\n      activeModelInfo = {}\r\n    }\r\n\r\n    // If we were passed info but no model, load the model\r\n    if (modelInfo && modelInfo.url) {\r\n      const loadFunction =\r\n        modelInfo.type === 'graph' ? tf.loadGraphModel : tf.loadLayersModel\r\n      // out with the old (if it exists)\r\n      if (model) tf.dispose(model)\r\n      // in with the new\r\n      model = await loadFunction(modelInfo.url, {\r\n        fromTFHub: modelInfo.fromTFHub\r\n      })\r\n    }\r\n\r\n    // creates teh appropriate start code\r\n    const startCode = startCodeCreator(\r\n      data.desc,\r\n      inputShape,\r\n      activeModelInfo,\r\n      code\r\n    )\r\n\r\n    // store it al!\r\n    setSandboxSettings({\r\n      codeProfile: null,\r\n      userCode: startCode,\r\n      inputTensorInfo: data,\r\n      activeModelInfo: activeModelInfo,\r\n      activeModel: model,\r\n      // close modals\r\n      shareVisible: false,\r\n      modelVisible: false,\r\n      inputVisible: false,\r\n      consoleOutput: ''\r\n    })\r\n  }\r\n\r\n  // All loaded up and ready (can't use anything sooner)\r\n  // Had to move this away from `useEffect` bc too soon\r\n  // even DOMContentLoaded was firing too fast\r\n  document.addEventListener('readystatechange', event => {\r\n    if (document.readyState === 'complete') {\r\n      console.log('says it loaded')\r\n      let urlParams = new URLSearchParams(window.location.search)\r\n      if (urlParams.has('code') && urlParams.has('inputTensor')) {\r\n        // setup sandbox based on querystring\r\n        const inputID = urlParams.get('inputTensor')\r\n        const modelInfo = JSON.parse(urlParams.get('modelInfo'))\r\n        let localTensor = inputTensors.find(x => x.id === inputID)\r\n        const inputTensorInfo = localTensor || {\r\n          id: inputID,\r\n          full: inputID,\r\n          desc: inputID\r\n        }\r\n\r\n        setupSandbox(inputTensorInfo, {\r\n          code: urlParams.get('code'),\r\n          modelInfo\r\n        })\r\n      } else {\r\n        // initialize to first input\r\n        setupSandbox(inputTensors[0])\r\n      }\r\n    }\r\n  })\r\n\r\n  // enable shift + enter shortcut (Memoized)\r\n  // moving to useEffect loses access to state from runCode\r\n  document.onkeydown = evt => {\r\n    evt = evt || window.event\r\n    if (evt.shiftKey && evt.keyCode === 13) {\r\n      runCode()\r\n      evt.preventDefault()\r\n    }\r\n  }\r\n\r\n  const hideAllModals = () => {\r\n    setSandboxSettings({\r\n      shareVisible: false,\r\n      modelVisible: false,\r\n      inputVisible: false\r\n    })\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header>\r\n        <div className=\"topBar\">\r\n          <div className=\"leftSide\">\r\n            <img\r\n              src=\"./logo.png\"\r\n              className=\"logo\"\r\n              alt=\"tensorplayground logo\"\r\n            />\r\n            <div className=\"instructions\">\r\n              <span>Select your input tensor or</span>\r\n              <ProgressButton\r\n                className=\"inputTensorBtn\"\r\n                onClick={async () => setSandboxSettings({ inputVisible: true })}\r\n              >\r\n                Add URL\r\n              </ProgressButton>\r\n            </div>\r\n            <div className=\"inputsPicker\">\r\n              <TensorSelector\r\n                activeInputTensor={sandboxSettings.inputTensorInfo}\r\n                onSelect={setupSandbox}\r\n                inputTensors={inputTensors}\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className=\"rightSide\">\r\n            <div className=\"explainerVideo\">\r\n              <YouTube\r\n                videoId=\"B7WAbGmdTZI\"\r\n                onPlay={playExplainer}\r\n                onEnd={stopExplainer}\r\n                onPause={stopExplainer}\r\n                opts={{\r\n                  height: 115,\r\n                  width: 200,\r\n                  playerVars:\r\n                    // https://developers.google.com/youtube/player_parameters\r\n                    { modestbranding: 1, rel: 0, fs: 0 }\r\n                }}\r\n              />\r\n              <span>What is TensorPlayground?</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <RunNav\r\n          run={runCode}\r\n          reset={() => {\r\n            setupSandbox(sandboxSettings.inputTensorInfo, { killModel: true })\r\n          }}\r\n          share={() => {\r\n            sharePlayground()\r\n            setSandboxSettings({ shareVisible: true })\r\n          }}\r\n          load={() => setSandboxSettings({ modelVisible: true })}\r\n        />\r\n      </header>\r\n      <main>\r\n        <div className=\"codeContainer\">\r\n          <div className=\"userCode\">\r\n            <AceEditor\r\n              placeholder=\"Code goes here\"\r\n              mode=\"javascript\"\r\n              theme=\"dracula\"\r\n              name=\"codeBlock\"\r\n              // Memoize the callback for efficiency\r\n              onChange={code => setSandboxSettings({ userCode: code })}\r\n              fontSize={14}\r\n              width=\"100%\"\r\n              height=\"100%\"\r\n              showPrintMargin={false}\r\n              showGutter={true}\r\n              highlightActiveLine={true}\r\n              value={sandboxSettings.userCode}\r\n              setOptions={{\r\n                enableBasicAutocompletion: false,\r\n                enableLiveAutocompletion: true,\r\n                enableSnippets: false,\r\n                showLineNumbers: true,\r\n                tabSize: 2,\r\n                useWorker: false\r\n              }}\r\n            />\r\n          </div>\r\n          <div className=\"errorBox\">\r\n            <p className=\"errorMessage\">{sandboxSettings.currentError}</p>\r\n          </div>\r\n          <CodeProfile profile={sandboxSettings.codeProfile} />\r\n        </div>\r\n        <div className=\"resultContainer\">\r\n          <Tabs>\r\n            <TabList>\r\n              <Tab>Result Tensor</Tab>\r\n              <Tab>Console Logs</Tab>\r\n            </TabList>\r\n            <TabPanel>\r\n              <Results tensor={sandboxSettings.displayTensor} />\r\n            </TabPanel>\r\n            <TabPanel>\r\n              <ClearButton\r\n                clear={() => setSandboxSettings({ consoleOutput: '' })}\r\n              />\r\n              <pre id=\"consoleOut\">{sandboxSettings.consoleOutput}</pre>\r\n            </TabPanel>\r\n          </Tabs>\r\n        </div>\r\n      </main>\r\n      <footer>\r\n        <MemoryStatus />\r\n      </footer>\r\n      <ShareModal\r\n        isOpen={sandboxSettings.shareVisible}\r\n        hideModal={hideAllModals}\r\n      />\r\n      <ModelModal\r\n        key=\"ModelModal\"\r\n        isOpen={sandboxSettings.modelVisible}\r\n        hideModal={hideAllModals}\r\n        onModelLoad={async info => {\r\n          await setupSandbox(sandboxSettings.inputTensorInfo, {\r\n            modelInfo: info\r\n          })\r\n        }}\r\n      />\r\n      <InputModal\r\n        isOpen={sandboxSettings.inputVisible}\r\n        hideModal={hideAllModals}\r\n        setInput={url => setupSandbox({ id: url, full: url, desc: url })}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import { useReducer } from 'react'\r\n\r\nconst reducer = (prevState, updater) =>\r\n  typeof updater === 'function'\r\n    ? { ...prevState, ...updater(prevState) }\r\n    : { ...prevState, ...updater }\r\n\r\nconst useMergeState = (initialState = {}) => useReducer(reducer, initialState)\r\n\r\nexport default useMergeState\r\n","let log = console.log\r\n\r\nexport default thingToAdd => {\r\n  console.log = function() {\r\n    log(arguments)\r\n    thingToAdd(arguments)\r\n    log.apply(log, arguments)\r\n  }\r\n}\r\n","const returnCode = params =>\r\n  params.includes('aTensor')\r\n    ? 'return aTensor'\r\n    : 'return tf.ones([400, 400, 3])'\r\n\r\nexport default (description, inputShape, activeModelInfo, code) => {\r\n  let startCode\r\n  let parameters = ['tf']\r\n  // Handle code setup\r\n  if (code) {\r\n    startCode = code\r\n  } else {\r\n    // Setup code\r\n    startCode = `// TensorPlayground.com${'\\n'}`\r\n    startCode += `// ${description}${'\\n'}`\r\n\r\n    // if we have an input tensor, add comment\r\n    if (inputShape) {\r\n      startCode += `// INPUT TENSOR SHAPE: [${inputShape}]${'\\n'}`\r\n      parameters.push('aTensor')\r\n    }\r\n\r\n    // If they have a model add that\r\n    if (activeModelInfo.label) {\r\n      startCode += `// MODEL: ${activeModelInfo.label} ${\r\n        activeModelInfo.info\r\n      }${'\\n'}`\r\n      parameters.push('model')\r\n    }\r\n\r\n    startCode += `${'\\n'}(${parameters.join(', ')}) => {\r\n  // return tensor to show\r\n  ${returnCode(parameters)}\r\n}`\r\n  }\r\n  return startCode\r\n}\r\n","import * as React from 'react'\r\n\r\nexport default props => {\r\n  const InputTensors = props =>\r\n    props.inputTensors.map(tData => {\r\n      let styleClasses =\r\n        props.activeInputTensor && props.activeInputTensor.id === tData.id\r\n          ? 'tensorBox selectedBox'\r\n          : 'tensorBox'\r\n      return (\r\n        <div\r\n          key={tData.id}\r\n          id={tData.id}\r\n          className={styleClasses}\r\n          onClick={() => props.onSelect(tData)}\r\n        >\r\n          <img src={tData.thumb} alt={tData.desc} />\r\n          <span>{tData.desc}</span>\r\n        </div>\r\n      )\r\n    })\r\n\r\n  return (\r\n    <div className=\"inputTensors\">\r\n      <InputTensors {...props} />\r\n    </div>\r\n  )\r\n}\r\n","import * as React from 'react'\r\nimport formatKB from '../lib/formatKB'\r\n\r\nexport default ({ profile }) => {\r\n  // grab values, but default to zero\r\n  const { newBytes, newTensors, peakBytes, timeInfo } = profile\r\n    ? profile\r\n    : { newBytes: 0, newTensors: 0, peakBytes: 0, timeInfo: { kernelMs: 0 } }\r\n  const cleanPeak = peakBytes < 0 ? 0 : peakBytes\r\n  const timeMS = timeInfo.kernelMs.toFixed(2)\r\n  return (\r\n    <div style={styles.container}>\r\n      <h3 style={styles.title}>Code Result Memory</h3>\r\n      <div style={styles.memBox}>\r\n        <div style={styles.dataPoint}>\r\n          <p>\r\n            <strong>New Bytes:</strong> {formatKB(newBytes)} KB\r\n          </p>\r\n        </div>\r\n        <div style={styles.dataPoint}>\r\n          <p>\r\n            <strong>New Tensors:</strong> {newTensors}\r\n          </p>\r\n        </div>\r\n        <div style={styles.dataPoint}>\r\n          <p>\r\n            <strong>Peak Bytes:</strong> {formatKB(cleanPeak)} KB\r\n          </p>\r\n        </div>\r\n        <div style={styles.dataPoint}>\r\n          <p>\r\n            <strong>Execution:</strong> {timeMS} ms\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst styles = {\r\n  container: {\r\n    backgroundColor: '#3a3d4f',\r\n    color: '#fff'\r\n  },\r\n  title: {\r\n    margin: 0,\r\n    borderBottom: '1px solid #44475c',\r\n    backgroundColor: '#3f4255',\r\n    textAlign: 'center',\r\n    fontSize: '1em'\r\n  },\r\n  memBox: {\r\n    display: 'flex',\r\n    alignItems: 'flex-start',\r\n    flexDirection: 'row',\r\n    flexWrap: 'nowrap',\r\n    fontSize: '0.9em'\r\n  },\r\n  dataPoint: {\r\n    // Big so it forces spacing in nowrap\r\n    width: '100%',\r\n    textAlign: 'center'\r\n  }\r\n}\r\n","import * as React from 'react'\r\nimport * as tf from '@tensorflow/tfjs'\r\nimport formatKB from '../lib/formatKB'\r\n\r\nexport default props => {\r\n  const {\r\n    numBytes,\r\n    numTensors,\r\n    numDataBuffers,\r\n    unreliable,\r\n    reasons\r\n  } = tf.memory()\r\n  let issues\r\n  if (unreliable) {\r\n    issues = (\r\n      <div className=\"tooltip\">\r\n        <span className=\"tooltiptext\">{reasons && reasons.toString()}</span>\r\n        <span role=\"img\" aria-label=\"issues\">\r\n          ❌\r\n        </span>\r\n      </div>\r\n    )\r\n  }\r\n  return (\r\n    <div style={styles.container}>\r\n      <h3 style={styles.title}>Browser Tensor Memory</h3>\r\n      <div style={styles.memBox}>\r\n        {issues}\r\n        <div style={styles.dataPoint}>\r\n          <p>\r\n            <strong>Tensor Bytes:</strong> {formatKB(numBytes)} KB\r\n          </p>\r\n        </div>\r\n        <div style={styles.dataPoint}>\r\n          <p>\r\n            <strong>Tensors:</strong> {numTensors}\r\n          </p>\r\n        </div>\r\n        <div style={styles.dataPoint}>\r\n          <p>\r\n            <strong>Data Buffers:</strong> {numDataBuffers}\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst styles = {\r\n  container: {\r\n    backgroundColor: '#181f27',\r\n    color: '#fff',\r\n    textAlign: 'center'\r\n  },\r\n  title: {\r\n    margin: 0,\r\n    borderBottom: '1px solid #2f3d4e',\r\n    backgroundColor: '#242e3b',\r\n    fontSize: '1em'\r\n  },\r\n  memBox: {\r\n    display: 'flex',\r\n    alignItems: 'flex-start',\r\n    flexDirection: 'row',\r\n    flexWrap: 'nowrap',\r\n    fontSize: '0.9em'\r\n  },\r\n  dataPoint: {\r\n    // Big so it forces spacing in nowrap\r\n    width: '100%'\r\n  }\r\n}\r\n","import React, { useState } from 'react'\r\n// modals\r\nimport Modal from 'react-modal'\r\n// dropdown\r\nimport Dropdown from 'react-dropdown'\r\nimport 'react-dropdown/style.css'\r\n// Awesome button\r\nimport ProgressButton from 'react-progress-button'\r\nimport '../../node_modules/react-progress-button/react-progress-button.css'\r\n\r\nconst options = [\r\n  {\r\n    value: 'customurl',\r\n    label: 'Custom URL',\r\n    className: 'customURL',\r\n    fromTFHub: false\r\n  },\r\n  {\r\n    type: 'group',\r\n    name: 'TF Hub Models',\r\n    items: [\r\n      {\r\n        value: 'mobilenetv2',\r\n        label: 'Mobilenet v2',\r\n        info: 'Expects [batch, 224, 224, 3]',\r\n        link: 'https://arxiv.org/abs/1801.04381',\r\n        url:\r\n          'https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/2',\r\n        fromTFHub: true,\r\n        type: 'graph'\r\n      },\r\n      {\r\n        value: 'inceptionv3',\r\n        label: 'Inception v3',\r\n        info: 'Expects [batch, 299, 200, 3]',\r\n        link: 'http://arxiv.org/abs/1512.00567',\r\n        url: 'https://tfhub.dev/google/imagenet/inception_v3/classification/1',\r\n        fromTFHub: true,\r\n        type: 'graph'\r\n      },\r\n      {\r\n        value: 'resnetv2',\r\n        label: 'Resnet v2',\r\n        info: 'Expects [batch, 224, 224, 3]',\r\n        link: 'https://arxiv.org/abs/1603.05027',\r\n        url: 'https://tfhub.dev/google/imagenet/resnet_v2_50/classification/1',\r\n        fromTFHub: true,\r\n        type: 'graph'\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    type: 'group',\r\n    name: 'Community Models',\r\n    items: [\r\n      {\r\n        value: 'nsfwjs',\r\n        label: 'NSFWJS',\r\n        info: 'Expects [batch, 224, 224, 3]',\r\n        link: 'https://github.com/GantMan/nsfw_model',\r\n        url:\r\n          'https://s3.amazonaws.com/ir_public/nsfwjscdn/TFJS_nsfw_mobilenet/tfjs_quant_nsfw_mobilenet/model.json',\r\n        fromTFHub: false,\r\n        type: 'layers'\r\n      }\r\n    ]\r\n  }\r\n]\r\n\r\nconst getFullInfo = mKey => {\r\n  const choices = options\r\n    .map(x =>\r\n      x.value ? x : null || (x.items && x.items.map(y => (y.value ? y : null)))\r\n    )\r\n    .flat()\r\n  return choices.find(x => x.value === mKey)\r\n}\r\n\r\nconst URLInput = props => {\r\n  if (props.show) {\r\n    return (\r\n      <div className=\"modalTop\" key=\"urlInputDiv\">\r\n        <p className=\"modeLabel\">URL:</p>\r\n        <input\r\n          type=\"text\"\r\n          name=\"modelURLInput\"\r\n          key=\"modelURLInput\"\r\n          id=\"modelInput\"\r\n          value={props.modelURL}\r\n          onChange={props.urlCallback}\r\n        />\r\n      </div>\r\n    )\r\n  } else {\r\n    return <div />\r\n  }\r\n}\r\n\r\nexport default props => {\r\n  const [currentModel, setCurrentModel] = useState({})\r\n  const [modelURL, setModelURL] = useState('')\r\n\r\n  const dropdownChange = ({ value }) => {\r\n    const selected = getFullInfo(value)\r\n    setCurrentModel(selected)\r\n  }\r\n\r\n  const urlCallback = ({ target }) => {\r\n    setModelURL(target.value)\r\n    let selected = getFullInfo('customurl')\r\n    selected.url = target.value\r\n    selected.info = target.value\r\n    setCurrentModel(selected)\r\n  }\r\n\r\n  const ShareRow = props => {\r\n    if (props.isOpen) {\r\n      return (\r\n        <div className=\"modalTop\">\r\n          <div className=\"leftSide fullSize\">\r\n            <Dropdown\r\n              className=\"fullSize\"\r\n              placeholder=\"Select a Model\"\r\n              options={options}\r\n              onChange={dropdownChange}\r\n              value={currentModel.value}\r\n            />\r\n          </div>\r\n          <div className=\"modalClose\">\r\n            <ProgressButton\r\n              className=\"modalProgressButton\"\r\n              onClick={async () => {\r\n                await props.onModelLoad(currentModel)\r\n              }}\r\n              onSuccess={props.hideModal}\r\n              onError={e => window.alert(e.message)}\r\n            >\r\n              Load\r\n            </ProgressButton>\r\n          </div>\r\n        </div>\r\n      )\r\n    } else {\r\n      return (\r\n        <center>\r\n          <h1>\r\n            <span role=\"img\" aria-label=\"done\">\r\n              👍\r\n            </span>\r\n          </h1>\r\n        </center>\r\n      )\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Modal\r\n      key=\"modelModalInner\"\r\n      isOpen={props.isOpen}\r\n      onRequestClose={props.hideModal}\r\n      shouldCloseOnOverlayClick={false}\r\n      shouldCloseOnEscape={true}\r\n      closeTimeoutMS={750}\r\n      className=\"modal\"\r\n      overlayClassName=\"overlay\"\r\n      contentLabel=\"share modal\"\r\n    >\r\n      <div className=\"modalTop\">\r\n        <div className=\"leftSide\">\r\n          <h1>Load Model:</h1>\r\n        </div>\r\n        <div className=\"modalClose\">\r\n          <button className=\"navButton\" onClick={props.hideModal}>\r\n            🅧\r\n          </button>\r\n        </div>\r\n      </div>\r\n      <ShareRow {...props} />\r\n      <URLInput\r\n        key=\"urlInputComponent\"\r\n        show={currentModel.value === 'customurl'}\r\n        modelURL={modelURL}\r\n        urlCallback={urlCallback}\r\n      />\r\n      <div>\r\n        <a href={currentModel.link} target=\"_blank\" rel=\"noopener noreferrer\">\r\n          {currentModel.link}\r\n        </a>\r\n      </div>\r\n    </Modal>\r\n  )\r\n}\r\n","import React, { useState } from 'react'\r\n// modals\r\nimport Modal from 'react-modal'\r\n\r\n// example: https://i.imgur.com/PieUY1f.jpg\r\nconst isValidUrl = string => {\r\n  var res = string.match(\r\n    /(http(s)?:\\/\\/.)?(www\\.)?[-a-zA-Z0-9@:%._+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_+.~#?&//=]*)/g\r\n  )\r\n  return res !== null\r\n}\r\n\r\nconst ShareRow = props => {\r\n  const [inputURL, setInputURL] = useState('')\r\n  const [urlValid, setURLValid] = useState(false)\r\n  if (props.isOpen) {\r\n    return (\r\n      <div className=\"modalTop\">\r\n        <div className=\"leftSide\">\r\n          <input\r\n            type=\"text\"\r\n            className=\"shareBox\"\r\n            value={inputURL}\r\n            onChange={({ target }) => {\r\n              setInputURL(target.value)\r\n              setURLValid(isValidUrl(target.value))\r\n            }}\r\n          />\r\n        </div>\r\n        <div className=\"modalClose\">\r\n          <button\r\n            disabled={!urlValid}\r\n            className=\"modalButton\"\r\n            onClick={() => {\r\n              props.setInput(inputURL)\r\n              props.hideModal()\r\n            }}\r\n          >\r\n            use\r\n          </button>\r\n        </div>\r\n      </div>\r\n    )\r\n  } else {\r\n    return (\r\n      <center>\r\n        <h1>\r\n          <span role=\"img\" aria-label=\"done\">\r\n            👍\r\n          </span>\r\n        </h1>\r\n      </center>\r\n    )\r\n  }\r\n}\r\n\r\nexport default props => (\r\n  <Modal\r\n    isOpen={props.isOpen}\r\n    onRequestClose={props.hideModal}\r\n    shouldCloseOnOverlayClick={true}\r\n    shouldCloseOnEscape={true}\r\n    closeTimeoutMS={750}\r\n    className=\"modal\"\r\n    overlayClassName=\"overlay\"\r\n    contentLabel=\"share modal\"\r\n  >\r\n    <div className=\"modalTop\">\r\n      <div className=\"leftSide\">\r\n        <h1>Input Tensor URL:</h1>\r\n      </div>\r\n      <div className=\"modalClose\">\r\n        <button className=\"navButton\" onClick={props.hideModal}>\r\n          🅧\r\n        </button>\r\n      </div>\r\n    </div>\r\n    <ShareRow {...props} />\r\n  </Modal>\r\n)\r\n","import React from 'react'\r\n// FontAwesome\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport {\r\n  faPlay,\r\n  faAlignLeft,\r\n  faExternalLinkAlt,\r\n  faLayerGroup,\r\n  faCodeBranch,\r\n  faFileCode\r\n} from '@fortawesome/free-solid-svg-icons'\r\nimport { faGithub } from '@fortawesome/free-brands-svg-icons'\r\n// Get TF Version\r\nconst packageInfo = require('../../package.json')\r\nconst tfVersion = packageInfo.dependencies['@tensorflow/tfjs'].replace(\r\n  /([^.|\\d])/g,\r\n  ''\r\n)\r\n\r\nexport default props => (\r\n  <nav id=\"runNav\">\r\n    <div className=\"leftSide\">\r\n      <button\r\n        title=\"Run Code (shift + enter)\"\r\n        className=\"navButton\"\r\n        id=\"run\"\r\n        onClick={props.run}\r\n      >\r\n        <FontAwesomeIcon icon={faPlay} /> Run\r\n      </button>\r\n      <button\r\n        title=\"Reset Code\"\r\n        className=\"navButton\"\r\n        id=\"reset\"\r\n        onClick={props.reset}\r\n      >\r\n        <FontAwesomeIcon icon={faAlignLeft} /> Reset\r\n      </button>\r\n      <button\r\n        title=\"Share this playground\"\r\n        className=\"navButton\"\r\n        id=\"share\"\r\n        onClick={props.share}\r\n      >\r\n        <FontAwesomeIcon icon={faExternalLinkAlt} /> Share\r\n      </button>\r\n      <button\r\n        title=\"Load an external model\"\r\n        className=\"navButton\"\r\n        id=\"load\"\r\n        onClick={props.load}\r\n      >\r\n        <FontAwesomeIcon icon={faLayerGroup} /> Load Model\r\n      </button>\r\n    </div>\r\n    <div className=\"rightSide\">\r\n      <FontAwesomeIcon icon={faFileCode} />{' '}\r\n      <a\r\n        className=\"navLink\"\r\n        href={`https://js.tensorflow.org/api/${tfVersion}/`}\r\n        target=\"_blank\"\r\n        rel=\"noopener noreferrer\"\r\n      >\r\n        TensorFlow.js Docs\r\n      </a>\r\n      <FontAwesomeIcon icon={faGithub} />{' '}\r\n      <a\r\n        className=\"navLink\"\r\n        href=\"https://github.com/infinitered/tensorplayground\"\r\n        target=\"_blank\"\r\n        rel=\"noopener noreferrer\"\r\n      >\r\n        GitHub\r\n      </a>\r\n      <FontAwesomeIcon icon={faCodeBranch} />{' '}\r\n      <a\r\n        className=\"navLink\"\r\n        href=\"https://infinite.red/machinelearning\"\r\n        target=\"_blank\"\r\n        rel=\"noopener noreferrer\"\r\n      >\r\n        Learn\r\n      </a>\r\n    </div>\r\n  </nav>\r\n)\r\n","import React from 'react'\r\n// FontAwesome\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faTrashAlt } from '@fortawesome/free-solid-svg-icons'\r\n\r\nexport default props => (\r\n  <button\r\n    title=\"Clear Console\"\r\n    style={{ float: 'right' }}\r\n    className=\"navButton\"\r\n    id=\"clearConsole\"\r\n    onClick={props.clear}\r\n  >\r\n    <FontAwesomeIcon icon={faTrashAlt} /> Clear Console\r\n  </button>\r\n)\r\n","import * as React from 'react'\r\nimport { useRef, useEffect } from 'react'\r\nimport * as tf from '@tensorflow/tfjs'\r\n\r\nconst componentToHex = c => {\r\n  let hex = Number(c).toString(16)\r\n  if (hex.length < 2) {\r\n    hex = '0' + hex\r\n  }\r\n  return hex\r\n}\r\n\r\nconst toColorHex = (rgb, tensorType) => {\r\n  let r, g, b\r\n  // Handle 1 or 3 channel\r\n  if (rgb.length === 1) {\r\n    r = rgb[0]\r\n    g = rgb[0]\r\n    b = rgb[0]\r\n  } else {\r\n    ;[r, g, b] = rgb\r\n  }\r\n\r\n  // Handle float32\r\n  if (tensorType === 'float32') {\r\n    r = Math.round(r * 255)\r\n    g = Math.round(g * 255)\r\n    b = Math.round(b * 255)\r\n  }\r\n  return '#' + componentToHex(r) + componentToHex(g) + componentToHex(b)\r\n}\r\n\r\nconst ColorBlock = props => (\r\n  <div style={{ display: 'flex', flexDirection: 'row' }}>\r\n    <div\r\n      style={{\r\n        marginRight: '10px',\r\n        width: '15px',\r\n        height: '15px',\r\n        border: '1px solid white',\r\n        backgroundColor: props.color\r\n      }}\r\n    />\r\n    {props.color}\r\n  </div>\r\n)\r\n\r\nconst printTensor = (areaBox, tensor) => {\r\n  if (tensor) {\r\n    const printText = `Details of Tensor\r\n    Matrix Rank: ${tensor.rankType},\r\n    Shape: ${tensor.shape} (Height, Width, Channels)\r\n    This means ${tensor.shape[1]} blocks of ${\r\n      tensor.shape[2]\r\n    } color value(s) (of type ${tensor.dtype}), done ${tensor.shape[0]} times\r\n\r\n    Result ${tensor.toString()}\r\n    `\r\n    areaBox.value = printText\r\n  }\r\n}\r\n\r\nconst TensorColors = ({ aTensor }) => {\r\n  // shortcircuit\r\n  if (!aTensor) return null\r\n\r\n  let channelCount\r\n  const corners = tf.tidy(() => {\r\n    // dims\r\n    const height = aTensor.shape[0]\r\n    const width = aTensor.shape[1]\r\n    channelCount = aTensor.shape[2]\r\n    // 4 corners\r\n    const tl = tf.slice(aTensor, [0, 0, 0], [1, 1, channelCount])\r\n    const tr = tf.slice(aTensor, [0, width - 1, 0], [1, 1, channelCount])\r\n    const bl = tf.slice(aTensor, [height - 1, 0, 0], [1, 1, channelCount])\r\n    const br = tf.slice(\r\n      aTensor,\r\n      [height - 1, width - 1, 0],\r\n      [1, 1, channelCount]\r\n    )\r\n    // return all corners\r\n    return tf.stack([tl, tr, bl, br])\r\n  })\r\n  // bring tensor back to JS\r\n  const values = corners.dataSync()\r\n  const arr = Array.from(values)\r\n  corners.dispose() // clean up\r\n  // bring back to 2D array\r\n  let newArr = []\r\n  while (arr.length) newArr.push(arr.splice(0, channelCount))\r\n  const tensorType = aTensor.dtype\r\n\r\n  return (\r\n    <ul style={styles.pixelList}>\r\n      <li>\r\n        Top Left Pixel <ColorBlock color={toColorHex(newArr[0], tensorType)} />\r\n      </li>\r\n      <li>\r\n        Bottom Left Pixel{' '}\r\n        <ColorBlock color={toColorHex(newArr[2], tensorType)} />\r\n      </li>\r\n      <li>\r\n        Top Right Pixel <ColorBlock color={toColorHex(newArr[1], tensorType)} />\r\n      </li>\r\n      <li>\r\n        Bottom Right Pixel{' '}\r\n        <ColorBlock color={toColorHex(newArr[3], tensorType)} />\r\n      </li>\r\n    </ul>\r\n  )\r\n}\r\n\r\nexport default props => {\r\n  if (!props.tensor) return null\r\n  const tensorDisplay = useRef(null)\r\n  const tensorText = useRef(null)\r\n\r\n  useEffect(() => {\r\n    const updateDisplay = async () => {\r\n      if (props.tensor) {\r\n        printTensor(tensorText.current, props.tensor)\r\n        await tf.browser.toPixels(props.tensor, tensorDisplay.current)\r\n        if (props.selfDestruct) props.tensor.dispose()\r\n      }\r\n    }\r\n    updateDisplay() // call that async goodness\r\n  }, [props.tensor])\r\n\r\n  return (\r\n    <div style={styles.container}>\r\n      <canvas style={styles.canvas} ref={tensorDisplay} />\r\n      <div style={styles.column}>\r\n        <div style={styles.leftColumn}>\r\n          <TensorColors aTensor={props.tensor} />\r\n        </div>\r\n        <div style={styles.rightColumn}>\r\n          <textarea style={styles.displayText} ref={tensorText} readOnly>\r\n            {props.text}\r\n          </textarea>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst styles = {\r\n  container: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    height: '100%'\r\n  },\r\n  column: {\r\n    display: 'flex',\r\n    justifyContent: 'space-between',\r\n    height: '100%',\r\n    marginRight: '6px'\r\n  },\r\n  leftColumn: {\r\n    // maxWidth: '50%'\r\n    // backgroundColor: \"yellow\"\r\n  },\r\n  rightColumn: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    flex: 1\r\n  },\r\n  displayText: {\r\n    minWidth: '380px',\r\n    display: 'flex',\r\n    flexGrow: 1,\r\n    width: '100%',\r\n    backgroundColor: '#23252a',\r\n    color: '#9ea7ba',\r\n    fontSize: '1em',\r\n    fontFamily: 'monospace'\r\n  },\r\n  pixelList: {\r\n    columns: 2,\r\n    textAlign: 'left',\r\n    listStyle: 'none',\r\n    padding: '10px',\r\n    margin: 0,\r\n    color: 'white'\r\n  },\r\n  canvas: {\r\n    maxWidth: '100%',\r\n    alignSelf: 'center'\r\n  }\r\n}\r\n","import React from 'react'\r\nimport {\r\n  VictoryChart,\r\n  VictoryScatter,\r\n  VictoryTheme,\r\n  VictoryLabel\r\n} from 'victory'\r\n\r\nexport default props => (\r\n  <VictoryChart theme={VictoryTheme.material} padding={40}>\r\n    <VictoryScatter\r\n      animate={true}\r\n      style={{\r\n        parent: {\r\n          border: '1px solid #ccc'\r\n        },\r\n        data: {\r\n          fill: '#8662b0'\r\n        },\r\n        labels: {\r\n          fontSize: 15,\r\n          fill: '#8662b0',\r\n          padding: 15\r\n        }\r\n      }}\r\n      labels={datanum => datanum.y}\r\n      labelComponent={<VictoryLabel dx={10} />}\r\n      size={7}\r\n      data={props.chartData}\r\n    />\r\n  </VictoryChart>\r\n)\r\n","import React from 'react'\r\nimport ImageTensorInspector from './imageTensorInspector'\r\nimport * as stringify from 'json-stringify-safe'\r\nimport * as tf from '@tensorflow/tfjs'\r\nimport SimpleChart from './simpleChart'\r\n\r\nconst charterize = plotData => {\r\n  let plotReady\r\n  // If Nx2 it's plotable\r\n  if (plotData.shape[1] === 2) {\r\n    plotReady = []\r\n    const synced = plotData.dataSync()\r\n    for (let i = 0; i < plotData.size; i += 2) {\r\n      plotReady.push({\r\n        x: synced[i],\r\n        y: synced[i + 1]\r\n      })\r\n    }\r\n  } else if (plotData.shape[0] === 2) {\r\n    plotReady = []\r\n    const synced = plotData.dataSync()\r\n    const jumpSize = plotData.shape[1]\r\n    for (let i = 0; i < jumpSize; i++) {\r\n      plotReady.push({\r\n        x: synced[i],\r\n        y: synced[i + jumpSize]\r\n      })\r\n    }\r\n  }\r\n  if (plotReady) {\r\n    return <SimpleChart chartData={plotReady} />\r\n  }\r\n}\r\n\r\nexport default props => {\r\n  const { tensor } = props\r\n  if (!tensor) {\r\n    return null\r\n  } else if (tensor.rankType === '1') {\r\n    return (\r\n      <div className=\"tensorResultSection\">\r\n        <h3>Rank 1 Tensor</h3>\r\n        <pre>{tensor.toString()}</pre>\r\n      </div>\r\n    )\r\n  } else if (tensor.rankType === '2') {\r\n    return (\r\n      <div className=\"tensorResultSection\">\r\n        <h3>Rank 2 Tensor</h3>\r\n        <pre>{tensor.toString()}</pre>\r\n        {charterize(tensor)}\r\n      </div>\r\n    )\r\n  } else if (tensor.rankType === '3') {\r\n    return <ImageTensorInspector tensor={tensor} />\r\n  } else if (tensor.rankType === '4') {\r\n    return (\r\n      <div>\r\n        <h3 style={{ paddingLeft: 10 }}>\r\n          {tensor.shape[0]} images in a 4D Tensor\r\n        </h3>\r\n        {tf.unstack(tensor).map(t => (\r\n          <ImageTensorInspector tensor={t} selfDestruct />\r\n        ))}\r\n      </div>\r\n    )\r\n  } else {\r\n    return (\r\n      <div className=\"tensorResultSection\">\r\n        <pre>{stringify(tensor, null, 2)}</pre>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\n// modals\r\nimport Modal from 'react-modal'\r\nimport copyToClipboard from '../lib/copyToClipboard'\r\nimport { BitlyClient } from 'bitly'\r\n\r\nconst bitly = new BitlyClient(process.env.REACT_APP_BITLY_TOKEN, {})\r\n\r\nconst ShareRow = props => {\r\n  const [shareLink, setShareLink] = useState(window.location.href)\r\n\r\n  // onload\r\n  useEffect(() => {\r\n    const generateLink = async () => {\r\n      const shortLink = await bitly.shorten(window.location.href)\r\n      setShareLink(shortLink.url)\r\n    }\r\n    generateLink()\r\n  }, [])\r\n\r\n  if (props.isOpen) {\r\n    return (\r\n      <div className=\"modalTop\">\r\n        <div className=\"leftSide\">\r\n          <input type=\"text\" value={shareLink} className=\"shareBox\" readOnly />\r\n        </div>\r\n        <div className=\"modalClose\">\r\n          <button\r\n            className=\"modalButton\"\r\n            onClick={() => {\r\n              try {\r\n                copyToClipboard(shareLink)\r\n              } catch (e) {\r\n                throw e\r\n              }\r\n              props.hideModal()\r\n            }}\r\n          >\r\n            copy\r\n          </button>\r\n        </div>\r\n      </div>\r\n    )\r\n  } else {\r\n    return (\r\n      <center>\r\n        <h1>\r\n          <span role=\"img\" aria-label=\"done\">\r\n            👍\r\n          </span>\r\n        </h1>\r\n      </center>\r\n    )\r\n  }\r\n}\r\n\r\nexport default props => (\r\n  <Modal\r\n    isOpen={props.isOpen}\r\n    onRequestClose={props.hideModal}\r\n    shouldCloseOnOverlayClick={true}\r\n    shouldCloseOnEscape={true}\r\n    closeTimeoutMS={750}\r\n    className=\"modal\"\r\n    overlayClassName=\"overlay\"\r\n    contentLabel=\"share modal\"\r\n  >\r\n    <div className=\"modalTop\">\r\n      <div className=\"leftSide\">\r\n        <h1>Share Link:</h1>\r\n      </div>\r\n      <div className=\"modalClose\">\r\n        <button className=\"navButton\" onClick={props.hideModal}>\r\n          🅧\r\n        </button>\r\n      </div>\r\n    </div>\r\n    <ShareRow {...props} link={'loading'} />\r\n  </Modal>\r\n)\r\n","// https://hackernoon.com/copying-text-to-clipboard-with-javascript-df4d4988697f\r\nexport default str => {\r\n  const el = document.createElement('textarea') // Create a <textarea> element\r\n  el.value = str // Set its value to the string that you want copied\r\n  el.setAttribute('readonly', '') // Make it readonly to be tamper-proof\r\n  el.style.position = 'absolute'\r\n  el.style.left = '-9999px' // Move outside the screen to make it invisible\r\n  document.body.appendChild(el) // Append the <textarea> element to the HTML document\r\n  const selected =\r\n    document.getSelection().rangeCount > 0 // Check if there is any content selected previously\r\n      ? document.getSelection().getRangeAt(0) // Store selection if found\r\n      : false // Mark as false to know no selection existed before\r\n  el.select() // Select the <textarea> content\r\n  document.execCommand('copy') // Copy - only works as a result of a user action (e.g. click events)\r\n  document.body.removeChild(el) // Remove the <textarea> element\r\n  if (selected) {\r\n    // If a selection existed before copying\r\n    document.getSelection().removeAllRanges() // Unselect everything on the HTML document\r\n    document.getSelection().addRange(selected) // Restore the original selection\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}