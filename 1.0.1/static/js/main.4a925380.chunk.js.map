{"version":3,"sources":["lib/formatKB.js","data/inputTensors.js","lib/convertURLtoTensor.js","App.js","lib/useMergeState.js","lib/addToConsoleLog.js","lib/startCodeCreator.js","components/tensorSelector.js","components/codeProfile.js","components/memoryStatus.js","components/modelModal.js","components/inputModal.js","components/runNav.js","components/clearButton.js","components/imageTensorInspector.js","components/simpleChart.js","components/results.js","components/shareModal.js","lib/copyToClipboard.js","serviceWorker.js","index.js"],"names":["__webpack_exports__","numBytes","Math","round","toString","replace","id","thumb","desc","full","channels","_tensorflow_tfjs__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","imageURL","Promise","resolve","reject","img","Image","crossOrigin","src","onload","tf","fromPixels","onerror","e","playExplainer","event","iframe","target","getIframe","requestFullScreen","mozRequestFullScreen","webkitRequestFullScreen","bind","stopExplainer","document","fullscreen","exitFullscreen","msExitFullscreen","mozCancelFullScreen","webkitExitFullscreen","App","_useMergeState","useMergeState","userCode","currentError","activeTensor","displayTensor","codeProfile","inputTensorInfo","activeModel","activeModelInfo","shareVisible","modelVisible","inputVisible","consoleOutput","_useMergeState2","Object","_Users_gantman_Documents_Projects_ML_tensorplayground_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_2__","sandboxSettings","setSandboxSettings","addToConsoleLog","args","allThings","slice","call","map","arg","stringify","join","sharePlayground","urlParams","URLSearchParams","append","JSON","window","history","replaceState","concat","location","origin","pathname","runCode","_ref","_Users_gantman_Documents_Projects_ML_tensorplayground_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__","_Users_gantman_Documents_Projects_ML_tensorplayground_node_modules_babel_preset_react_app_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","a","mark","_callee2","timeInfo","wrap","_callee2$","_context2","prev","next","_callee","_callee$","_context","resultTensor","userFunc","eval","Error","dispose","message","sent","stop","t0","apply","this","arguments","tensorize","_ref3","_callee3","data","tensorResult","promiseArray","tensors","previousActive","_context3","Array","isArray","url","convertURLToTensor","all","x","abrupt","shape","console","log","_x","setupSandbox","_ref4","_callee4","settings","inputShape","code","modelInfo","killModel","model","loadFunction","startCode","_args4","_context4","length","undefined","type","fromTFHub","startCodeCreator","_x2","useEffect","search","has","inputID","get","parse","localTensor","inputTensors","find","onkeydown","evt","shiftKey","keyCode","preventDefault","hideAllModals","react__WEBPACK_IMPORTED_MODULE_3___default","createElement","className","alt","react_progress_button__WEBPACK_IMPORTED_MODULE_8___default","onClick","_callee5","_context5","_components_tensorSelector__WEBPACK_IMPORTED_MODULE_20__","activeInputTensor","onSelect","react_youtube__WEBPACK_IMPORTED_MODULE_6__","videoId","onPlay","onEnd","onPause","opts","height","width","playerVars","modestbranding","rel","fs","_components_runNav__WEBPACK_IMPORTED_MODULE_27__","run","reset","share","load","react_ace__WEBPACK_IMPORTED_MODULE_10___default","placeholder","mode","theme","name","onChange","fontSize","showPrintMargin","showGutter","highlightActiveLine","value","setOptions","enableBasicAutocompletion","enableLiveAutocompletion","enableSnippets","showLineNumbers","tabSize","useWorker","_components_codeProfile__WEBPACK_IMPORTED_MODULE_21__","profile","react_tabs__WEBPACK_IMPORTED_MODULE_14__","_components_results__WEBPACK_IMPORTED_MODULE_23__","tensor","_components_clearButton__WEBPACK_IMPORTED_MODULE_28__","clear","_components_memoryStatus__WEBPACK_IMPORTED_MODULE_22__","_components_shareModal__WEBPACK_IMPORTED_MODULE_24__","isOpen","hideModal","_components_modelModal__WEBPACK_IMPORTED_MODULE_25__","key","onModelLoad","_ref6","_callee6","info","_context6","_x3","_components_inputModal__WEBPACK_IMPORTED_MODULE_26__","setInput","reducer","prevState","updater","_Users_gantman_Documents_Projects_ML_tensorplayground_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","initialState","useReducer","thingToAdd","description","parameters","push","label","includes","react__WEBPACK_IMPORTED_MODULE_0__","props","tData","styleClasses","_lib_formatKB__WEBPACK_IMPORTED_MODULE_1__","_ref2","newBytes","newTensors","peakBytes","kernelMs","cleanPeak","timeMS","toFixed","style","styles","container","title","memBox","dataPoint","formatKB","backgroundColor","color","margin","borderBottom","textAlign","display","alignItems","flexDirection","flexWrap","_tensorflow_tfjs__WEBPACK_IMPORTED_MODULE_1__","_lib_formatKB__WEBPACK_IMPORTED_MODULE_2__","issues","_tf$memory","numTensors","numDataBuffers","unreliable","reasons","role","aria-label","options","items","link","getFullInfo","mKey","y","flat","URLInput","show","modelURL","urlCallback","_useState","useState","_useState2","currentModel","setCurrentModel","_useState3","_useState4","setModelURL","dropdownChange","selected","react_modal__WEBPACK_IMPORTED_MODULE_4___default","onRequestClose","shouldCloseOnOverlayClick","shouldCloseOnEscape","closeTimeoutMS","overlayClassName","contentLabel","react_dropdown__WEBPACK_IMPORTED_MODULE_5___default","react_progress_button__WEBPACK_IMPORTED_MODULE_7___default","onSuccess","onError","alert","href","ShareRow","_Users_gantman_Documents_Projects_ML_tensorplayground_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","inputURL","setInputURL","urlValid","setURLValid","react__WEBPACK_IMPORTED_MODULE_1___default","match","disabled","react_modal__WEBPACK_IMPORTED_MODULE_2___default","react__WEBPACK_IMPORTED_MODULE_0___default","n","_fortawesome_react_fontawesome__WEBPACK_IMPORTED_MODULE_1__","_fortawesome_free_solid_svg_icons__WEBPACK_IMPORTED_MODULE_2__","_fortawesome_free_brands_svg_icons__WEBPACK_IMPORTED_MODULE_3__","tfVersion","require","dependencies","icon","faPlay","faAlignLeft","faExternalLinkAlt","faLayerGroup","faFileCode","faGithub","faCodeBranch","float","faTrashAlt","componentToHex","c","hex","Number","toColorHex","rgb","tensorType","r","g","b","_rgb","slicedToArray","ColorBlock","react","marginRight","border","printTensor","areaBox","printText","rankType","dtype","TensorColors","channelCount","aTensor","corners","tl","tr","bl","br","values","dataSync","arr","from","newArr","splice","pixelList","imageTensorInspector_ColorBlock","imageTensorInspector","tensorDisplay","useRef","tensorText","asyncToGenerator","regenerator_default","current","toPixels","selfDestruct","updateDisplay","canvas","ref","column","leftColumn","imageTensorInspector_TensorColors","rightColumn","displayText","readOnly","text","justifyContent","flex","minWidth","flexGrow","fontFamily","columns","listStyle","padding","maxWidth","alignSelf","simpleChart","react_default","victory_chart","VictoryTheme","material","victory_scatter","animate","parent","fill","labels","datanum","labelComponent","victory_label","dx","size","chartData","plotData","plotReady","synced","i","jumpSize","charterize","paddingLeft","t","bitly","BitlyClient","process","shareLink","setShareLink","shortLink","shorten","generateLink","str","el","setAttribute","position","left","body","appendChild","getSelection","rangeCount","getRangeAt","select","execCommand","removeChild","removeAllRanges","addRange","copyToClipboard","lib_default","shareModal_ShareRow","assign","Boolean","hostname","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4a925380.chunk.js","sourcesContent":["const numberWithCommas = x => x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')\n\nexport default numBytes => numberWithCommas(Math.round(numBytes / 1024))\n","export default [\n  {\n    id: 'bella',\n    thumb: './bella_thumb.jpg',\n    desc: 'RGB Tensor',\n    full: './bella.jpg',\n    channels: 3\n  },\n  {\n    id: 'italy',\n    thumb: './italy_thumb.jpg',\n    desc: 'Monochrome Tensor',\n    full: './italy.jpg',\n    channels: 1\n  },\n  {\n    id: 'batch',\n    thumb: './batch_thumb.jpg',\n    desc: 'RGB Image Batch',\n    full: ['./batch1.jpg', './batch2.jpg', './batch3.jpg'],\n    channels: 3\n  },\n  {\n    id: 'none',\n    thumb: './null_thumb.png',\n    desc: 'No Input Tensor',\n    full: null,\n    channels: 0\n  }\n]\n","import * as tf from '@tensorflow/tfjs'\n\nexport default (imageURL, channels) => {\n  return new Promise((resolve, reject) => {\n    const img = new Image()\n    img.crossOrigin = 'anonymous'\n    img.src = imageURL\n    img.onload = () => {\n      resolve(tf.browser.fromPixels(img, channels))\n    }\n    img.onerror = e => {\n      reject(e)\n    }\n  })\n}\n","import React, { useEffect } from 'react'\nimport './App.css'\nimport * as tf from '@tensorflow/tfjs'\nimport YouTube from 'react-youtube'\nimport * as stringify from 'json-stringify-safe'\n// Awesome button\nimport ProgressButton from 'react-progress-button'\nimport '../node_modules/react-progress-button/react-progress-button.css'\n\n// Code editor & styles\nimport AceEditor from 'react-ace'\nimport 'brace'\nimport 'brace/mode/javascript'\nimport 'brace/theme/dracula'\n\n// Tabs and style\nimport { Tab, Tabs, TabList, TabPanel } from 'react-tabs'\nimport 'react-tabs/style/react-tabs.css'\n\n// merge state custom hook\nimport useMergeState from './lib/useMergeState'\nimport convertURLToTensor from './lib/convertURLtoTensor'\nimport addToConsoleLog from './lib/addToConsoleLog'\nimport startCodeCreator from './lib/startCodeCreator'\n// Custom components\nimport TensorSelector from './components/tensorSelector'\nimport CodeProfile from './components/codeProfile'\nimport MemoryStatus from './components/memoryStatus'\nimport Results from './components/results'\nimport ShareModal from './components/shareModal'\nimport ModelModal from './components/modelModal'\nimport InputModal from './components/inputModal'\nimport RunNav from './components/runNav'\nimport ClearButton from './components/clearButton'\n// Input Tensor info etc.\nimport inputTensors from './data/inputTensors'\n\nconst playExplainer = event => {\n  const iframe = event.target.getIframe()\n  // fullscreen it\n  const requestFullScreen =\n    iframe.requestFullScreen ||\n    iframe.mozRequestFullScreen ||\n    iframe.webkitRequestFullScreen\n  if (requestFullScreen) {\n    requestFullScreen.bind(iframe)()\n  }\n}\n\nconst stopExplainer = () => {\n  if (document.fullscreen)\n    document.exitFullscreen\n      ? document.exitFullscreen()\n      : document.msExitFullscreen\n      ? document.msExitFullscreen()\n      : document.mozCancelFullScreen\n      ? document.mozCancelFullScreen()\n      : document.webkitExitFullscreen && document.webkitExitFullscreen()\n}\n\nfunction App() {\n  const [sandboxSettings, setSandboxSettings] = useMergeState({\n    userCode: '',\n    currentError: null,\n    activeTensor: null,\n    displayTensor: null,\n    codeProfile: null,\n    inputTensorInfo: null,\n    activeModel: null,\n    activeModelInfo: {},\n    shareVisible: false,\n    modelVisible: false,\n    inputVisible: false,\n    consoleOutput: ''\n  })\n\n  // Jump in on console.log and grab it\n  addToConsoleLog(args => {\n    // Converts args into regular array\n    const arrayArgs = [].slice.call(args)\n    // switch objects to string version of that object\n    const arrayStyleArgs = arrayArgs.map(arg =>\n      typeof arg === 'object' ? stringify(arg, null, 2) : arg\n    )\n    // breaks multiple args into newlines\n    const allThings = '\\n' + arrayStyleArgs.join('\\n')\n    setSandboxSettings({\n      consoleOutput: sandboxSettings.consoleOutput + allThings\n    })\n  })\n\n  const sharePlayground = () => {\n    const { userCode, inputTensorInfo, activeModelInfo } = sandboxSettings\n    let urlParams = new URLSearchParams()\n    urlParams.append('code', userCode)\n    urlParams.append('inputTensor', inputTensorInfo.id)\n    urlParams.append('modelInfo', JSON.stringify(activeModelInfo))\n    if (window.history.replaceState) {\n      window.history.replaceState(\n        'code',\n        'Tensor Playground',\n        `${window.location.origin}${window.location.pathname}?${urlParams}`\n      )\n    }\n  }\n\n  const runCode = async () => {\n    try {\n      sharePlayground() // update URL\n      let codeProfile\n      const timeInfo = await tf.time(async () => {\n        codeProfile = await tf.profile(() => {\n          try {\n            const resultTensor = tf.tidy(() => {\n              const userFunc = eval(sandboxSettings.userCode)\n              return userFunc(\n                tf,\n                sandboxSettings.activeTensor,\n                sandboxSettings.activeModel\n              )\n            })\n            // Error if sandbox was empty\n            if (!resultTensor) {\n              tf.disposeVariables()\n              throw new Error('Nothing was returned from the sandbox!')\n            }\n            // dispose current display if not used\n            if (\n              resultTensor !== sandboxSettings.displayTensor &&\n              sandboxSettings.displayTensor !== sandboxSettings.activeTensor\n            )\n              sandboxSettings.displayTensor &&\n                sandboxSettings.displayTensor.dispose &&\n                sandboxSettings.displayTensor.dispose()\n            setSandboxSettings({\n              displayTensor: resultTensor,\n              currentError: null\n            })\n          } catch (e) {\n            setSandboxSettings({ currentError: e.message, displayTensor: null })\n          }\n        })\n      })\n      if (codeProfile) codeProfile.timeInfo = timeInfo\n      setSandboxSettings({ codeProfile })\n    } catch (e) {\n      setSandboxSettings({ currentError: e.message, displayTensor: null })\n    }\n  }\n\n  const tensorize = async data => {\n    const { full, channels } = data\n\n    try {\n      // pre-cleanup\n      tf.disposeVariables()\n      let tensorResult\n      if (Array.isArray(full)) {\n        const promiseArray = full.map(url => convertURLToTensor(url, channels))\n        const tensors = await Promise.all(promiseArray)\n        // Create batch tensor\n        tensorResult = tf.stack(tensors)\n        // reclaim original tensor memory\n        tensors.map(x => x.dispose())\n      } else if (!full) {\n        tensorResult = null\n      } else {\n        tensorResult = await convertURLToTensor(full, channels)\n      }\n      let previousActive = sandboxSettings.activeTensor\n      sandboxSettings.displayTensor &&\n        sandboxSettings.displayTensor.dispose &&\n        sandboxSettings.displayTensor.dispose()\n      setSandboxSettings({\n        activeTensor: tensorResult,\n        displayTensor: null,\n        currentError: null\n      })\n      if (previousActive) previousActive.dispose()\n      return tensorResult && tensorResult.shape\n    } catch (e) {\n      setSandboxSettings({ currentError: `Unable to load: ${full}` })\n      console.log(e.message)\n    }\n  }\n\n  const setupSandbox = async (data, settings = {}) => {\n    // kickoff tensorization of input\n    const inputShape = await tensorize(data)\n    const { code, modelInfo, killModel } = settings\n    let model = sandboxSettings.activeModel\n    let activeModelInfo = modelInfo\n      ? modelInfo\n      : sandboxSettings.activeModelInfo\n\n    if (killModel) {\n      // cleanup\n      if (model) tf.dispose(model)\n      model = null\n      activeModelInfo = {}\n    }\n\n    // If we were passed info but no model, load the model\n    if (modelInfo && modelInfo.url) {\n      const loadFunction =\n        modelInfo.type === 'graph' ? tf.loadGraphModel : tf.loadLayersModel\n      // out with the old (if it exists)\n      if (model) tf.dispose(model)\n      // in with the new\n      model = await loadFunction(modelInfo.url, {\n        fromTFHub: modelInfo.fromTFHub\n      })\n    }\n\n    // creates teh appropriate start code\n    const startCode = startCodeCreator(\n      data.desc,\n      inputShape,\n      activeModelInfo,\n      code\n    )\n\n    // store it al!\n    setSandboxSettings({\n      codeProfile: null,\n      userCode: startCode,\n      inputTensorInfo: data,\n      activeModelInfo: activeModelInfo,\n      activeModel: model,\n      // close modals\n      shareVisible: false,\n      modelVisible: false,\n      inputVisible: false,\n      consoleOutput: ''\n    })\n  }\n\n  // onload\n  useEffect(() => {\n    let urlParams = new URLSearchParams(window.location.search)\n    if (urlParams.has('code') && urlParams.has('inputTensor')) {\n      // setup sandbox based on querystring\n      const inputID = urlParams.get('inputTensor')\n      const modelInfo = JSON.parse(urlParams.get('modelInfo'))\n      let localTensor = inputTensors.find(x => x.id === inputID)\n      const inputTensorInfo = localTensor || {\n        id: inputID,\n        full: inputID,\n        desc: inputID\n      }\n      setupSandbox(inputTensorInfo, { code: urlParams.get('code'), modelInfo })\n    } else {\n      // initialize to first input\n      setupSandbox(inputTensors[0])\n    }\n  }, [])\n\n  // enable shift + enter shortcut (Memoized)\n  // moving to useEffect loses access to state from runCode\n  document.onkeydown = evt => {\n    evt = evt || window.event\n    if (evt.shiftKey && evt.keyCode === 13) {\n      runCode()\n      evt.preventDefault()\n    }\n  }\n\n  const hideAllModals = () => {\n    setSandboxSettings({\n      shareVisible: false,\n      modelVisible: false,\n      inputVisible: false\n    })\n  }\n\n  return (\n    <div className=\"App\">\n      <header>\n        <div className=\"topBar\">\n          <div className=\"leftSide\">\n            <img\n              src=\"./logo.png\"\n              className=\"logo\"\n              alt=\"tensorplayground logo\"\n            />\n            <div className=\"instructions\">\n              <span>Select your input tensor or</span>\n              <ProgressButton\n                className=\"inputTensorBtn\"\n                onClick={async () => setSandboxSettings({ inputVisible: true })}\n              >\n                Add URL\n              </ProgressButton>\n            </div>\n            <div className=\"inputsPicker\">\n              <TensorSelector\n                activeInputTensor={sandboxSettings.inputTensorInfo}\n                onSelect={setupSandbox}\n                inputTensors={inputTensors}\n              />\n            </div>\n          </div>\n          <div className=\"rightSide\">\n            <div className=\"explainerVideo\">\n              <YouTube\n                videoId=\"hdAX6ORhihA\"\n                onPlay={playExplainer}\n                onEnd={stopExplainer}\n                onPause={stopExplainer}\n                opts={{\n                  height: 115,\n                  width: 200,\n                  playerVars:\n                    // https://developers.google.com/youtube/player_parameters\n                    { modestbranding: 1, rel: 0, fs: 0 }\n                }}\n              />\n              <span>What is TensorPlayground?</span>\n            </div>\n          </div>\n        </div>\n        <RunNav\n          run={runCode}\n          reset={() => {\n            setupSandbox(sandboxSettings.inputTensorInfo, { killModel: true })\n          }}\n          share={() => {\n            sharePlayground()\n            setSandboxSettings({ shareVisible: true })\n          }}\n          load={() => setSandboxSettings({ modelVisible: true })}\n        />\n      </header>\n      <main>\n        <div className=\"codeContainer\">\n          <div className=\"userCode\">\n            <AceEditor\n              placeholder=\"Code goes here\"\n              mode=\"javascript\"\n              theme=\"dracula\"\n              name=\"codeBlock\"\n              // Memoize the callback for efficiency\n              onChange={code => setSandboxSettings({ userCode: code })}\n              fontSize={14}\n              width=\"100%\"\n              height=\"100%\"\n              showPrintMargin={false}\n              showGutter={true}\n              highlightActiveLine={true}\n              value={sandboxSettings.userCode}\n              setOptions={{\n                enableBasicAutocompletion: false,\n                enableLiveAutocompletion: true,\n                enableSnippets: false,\n                showLineNumbers: true,\n                tabSize: 2,\n                useWorker: false\n              }}\n            />\n          </div>\n          <div className=\"errorBox\">\n            <p className=\"errorMessage\">{sandboxSettings.currentError}</p>\n          </div>\n          <CodeProfile profile={sandboxSettings.codeProfile} />\n        </div>\n        <div className=\"resultContainer\">\n          <Tabs>\n            <TabList>\n              <Tab>Result Tensor</Tab>\n              <Tab>Console Logs</Tab>\n            </TabList>\n            <TabPanel>\n              <Results tensor={sandboxSettings.displayTensor} />\n            </TabPanel>\n            <TabPanel>\n              <ClearButton\n                clear={() => setSandboxSettings({ consoleOutput: '' })}\n              />\n              <pre id=\"consoleOut\">{sandboxSettings.consoleOutput}</pre>\n            </TabPanel>\n          </Tabs>\n        </div>\n      </main>\n      <footer>\n        <MemoryStatus />\n      </footer>\n      <ShareModal\n        isOpen={sandboxSettings.shareVisible}\n        hideModal={hideAllModals}\n      />\n      <ModelModal\n        key=\"ModelModal\"\n        isOpen={sandboxSettings.modelVisible}\n        hideModal={hideAllModals}\n        onModelLoad={async info => {\n          await setupSandbox(sandboxSettings.inputTensorInfo, {\n            modelInfo: info\n          })\n        }}\n      />\n      <InputModal\n        isOpen={sandboxSettings.inputVisible}\n        hideModal={hideAllModals}\n        setInput={url => setupSandbox({ id: url, full: url, desc: url })}\n      />\n    </div>\n  )\n}\n\nexport default App\n","import { useReducer } from 'react'\n\nconst reducer = (prevState, updater) =>\n  typeof updater === 'function'\n    ? { ...prevState, ...updater(prevState) }\n    : { ...prevState, ...updater }\n\nconst useMergeState = (initialState = {}) => useReducer(reducer, initialState)\n\nexport default useMergeState\n","let log = console.log\n\nexport default thingToAdd => {\n  console.log = function() {\n    log(arguments)\n    thingToAdd(arguments)\n    log.apply(log, arguments)\n  }\n}\n","const returnCode = params =>\n  params.includes('aTensor')\n    ? 'return aTensor'\n    : 'return tf.ones([400, 400, 3])'\n\nexport default (description, inputShape, activeModelInfo, code) => {\n  let startCode\n  let parameters = ['tf']\n  // Handle code setup\n  if (code) {\n    startCode = code\n  } else {\n    // Setup code\n    startCode = `// TensorPlayground.com${'\\n'}`\n    startCode += `// ${description}${'\\n'}`\n\n    // if we have an input tensor, add comment\n    if (inputShape) {\n      startCode += `// INPUT TENSOR SHAPE: [${inputShape}]${'\\n'}`\n      parameters.push('aTensor')\n    }\n\n    // If they have a model add that\n    if (activeModelInfo.label) {\n      startCode += `// MODEL: ${activeModelInfo.label} ${\n        activeModelInfo.info\n      }${'\\n'}`\n      parameters.push('model')\n    }\n\n    startCode += `${'\\n'}(${parameters.join(', ')}) => {\n  // return tensor to show\n  ${returnCode(parameters)}\n}`\n  }\n  return startCode\n}\n","import * as React from 'react'\n\nexport default props => {\n  const InputTensors = props =>\n    props.inputTensors.map(tData => {\n      let styleClasses =\n        props.activeInputTensor && props.activeInputTensor.id === tData.id\n          ? 'tensorBox selectedBox'\n          : 'tensorBox'\n      return (\n        <div\n          key={tData.id}\n          id={tData.id}\n          className={styleClasses}\n          onClick={() => props.onSelect(tData)}\n        >\n          <img src={tData.thumb} alt={tData.desc} />\n          <span>{tData.desc}</span>\n        </div>\n      )\n    })\n\n  return (\n    <div className=\"inputTensors\">\n      <InputTensors {...props} />\n    </div>\n  )\n}\n","import * as React from 'react'\nimport formatKB from '../lib/formatKB'\n\nexport default ({ profile }) => {\n  // grab values, but default to zero\n  const { newBytes, newTensors, peakBytes, timeInfo } = profile\n    ? profile\n    : { newBytes: 0, newTensors: 0, peakBytes: 0, timeInfo: { kernelMs: 0 } }\n  const cleanPeak = peakBytes < 0 ? 0 : peakBytes\n  const timeMS = timeInfo.kernelMs.toFixed(2)\n  return (\n    <div style={styles.container}>\n      <h3 style={styles.title}>Code Result Memory</h3>\n      <div style={styles.memBox}>\n        <div style={styles.dataPoint}>\n          <p>\n            <strong>New Bytes:</strong> {formatKB(newBytes)} KB\n          </p>\n        </div>\n        <div style={styles.dataPoint}>\n          <p>\n            <strong>New Tensors:</strong> {newTensors}\n          </p>\n        </div>\n        <div style={styles.dataPoint}>\n          <p>\n            <strong>Peak Bytes:</strong> {formatKB(cleanPeak)} KB\n          </p>\n        </div>\n        <div style={styles.dataPoint}>\n          <p>\n            <strong>Execution:</strong> {timeMS} ms\n          </p>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nconst styles = {\n  container: {\n    backgroundColor: '#3a3d4f',\n    color: '#fff'\n  },\n  title: {\n    margin: 0,\n    borderBottom: '1px solid #44475c',\n    backgroundColor: '#3f4255',\n    textAlign: 'center',\n    fontSize: '1em'\n  },\n  memBox: {\n    display: 'flex',\n    alignItems: 'flex-start',\n    flexDirection: 'row',\n    flexWrap: 'nowrap',\n    fontSize: '0.9em'\n  },\n  dataPoint: {\n    // Big so it forces spacing in nowrap\n    width: '100%',\n    textAlign: 'center'\n  }\n}\n","import * as React from 'react'\nimport * as tf from '@tensorflow/tfjs'\nimport formatKB from '../lib/formatKB'\n\nexport default props => {\n  const {\n    numBytes,\n    numTensors,\n    numDataBuffers,\n    unreliable,\n    reasons\n  } = tf.memory()\n  let issues\n  if (unreliable) {\n    issues = (\n      <div className=\"tooltip\">\n        <span className=\"tooltiptext\">{reasons && reasons.toString()}</span>\n        <span role=\"img\" aria-label=\"issues\">\n          ❌\n        </span>\n      </div>\n    )\n  }\n  return (\n    <div style={styles.container}>\n      <h3 style={styles.title}>Browser Tensor Memory</h3>\n      <div style={styles.memBox}>\n        {issues}\n        <div style={styles.dataPoint}>\n          <p>\n            <strong>Tensor Bytes:</strong> {formatKB(numBytes)} KB\n          </p>\n        </div>\n        <div style={styles.dataPoint}>\n          <p>\n            <strong>Tensors:</strong> {numTensors}\n          </p>\n        </div>\n        <div style={styles.dataPoint}>\n          <p>\n            <strong>Data Buffers:</strong> {numDataBuffers}\n          </p>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nconst styles = {\n  container: {\n    backgroundColor: '#181f27',\n    color: '#fff',\n    textAlign: 'center'\n  },\n  title: {\n    margin: 0,\n    borderBottom: '1px solid #2f3d4e',\n    backgroundColor: '#242e3b',\n    fontSize: '1em'\n  },\n  memBox: {\n    display: 'flex',\n    alignItems: 'flex-start',\n    flexDirection: 'row',\n    flexWrap: 'nowrap',\n    fontSize: '0.9em'\n  },\n  dataPoint: {\n    // Big so it forces spacing in nowrap\n    width: '100%'\n  }\n}\n","import React, { useState } from 'react'\n// modals\nimport Modal from 'react-modal'\n// dropdown\nimport Dropdown from 'react-dropdown'\nimport 'react-dropdown/style.css'\n// Awesome button\nimport ProgressButton from 'react-progress-button'\nimport '../../node_modules/react-progress-button/react-progress-button.css'\n\nconst options = [\n  {\n    value: 'customurl',\n    label: 'Custom URL',\n    className: 'customURL',\n    fromTFHub: false\n  },\n  {\n    type: 'group',\n    name: 'TF Hub Models',\n    items: [\n      {\n        value: 'mobilenetv2',\n        label: 'Mobilenet v2',\n        info: 'Expects [batch, 224, 224, 3]',\n        link: 'https://arxiv.org/abs/1801.04381',\n        url:\n          'https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/2',\n        fromTFHub: true,\n        type: 'graph'\n      },\n      {\n        value: 'inceptionv3',\n        label: 'Inception v3',\n        info: 'Expects [batch, 299, 200, 3]',\n        link: 'http://arxiv.org/abs/1512.00567',\n        url: 'https://tfhub.dev/google/imagenet/inception_v3/classification/1',\n        fromTFHub: true,\n        type: 'graph'\n      },\n      {\n        value: 'resnetv2',\n        label: 'Resnet v2',\n        info: 'Expects [batch, 224, 224, 3]',\n        link: 'https://arxiv.org/abs/1603.05027',\n        url: 'https://tfhub.dev/google/imagenet/resnet_v2_50/classification/1',\n        fromTFHub: true,\n        type: 'graph'\n      }\n    ]\n  },\n  {\n    type: 'group',\n    name: 'Community Models',\n    items: [\n      {\n        value: 'nsfwjs',\n        label: 'NSFWJS',\n        info: 'Expects [batch, 224, 224, 3]',\n        link: 'https://github.com/GantMan/nsfw_model',\n        url:\n          'https://s3.amazonaws.com/ir_public/nsfwjscdn/TFJS_nsfw_mobilenet/tfjs_quant_nsfw_mobilenet/model.json',\n        fromTFHub: false,\n        type: 'layers'\n      }\n    ]\n  }\n]\n\nconst getFullInfo = mKey => {\n  const choices = options\n    .map(x =>\n      x.value ? x : null || (x.items && x.items.map(y => (y.value ? y : null)))\n    )\n    .flat()\n  return choices.find(x => x.value === mKey)\n}\n\nconst URLInput = props => {\n  if (props.show) {\n    return (\n      <div className=\"modalTop\" key=\"urlInputDiv\">\n        <p className=\"modeLabel\">URL:</p>\n        <input\n          type=\"text\"\n          name=\"modelURLInput\"\n          key=\"modelURLInput\"\n          id=\"modelInput\"\n          value={props.modelURL}\n          onChange={props.urlCallback}\n        />\n      </div>\n    )\n  } else {\n    return <div />\n  }\n}\n\nexport default props => {\n  const [currentModel, setCurrentModel] = useState({})\n  const [modelURL, setModelURL] = useState('')\n\n  const dropdownChange = ({ value }) => {\n    const selected = getFullInfo(value)\n    setCurrentModel(selected)\n  }\n\n  const urlCallback = ({ target }) => {\n    setModelURL(target.value)\n    let selected = getFullInfo('customurl')\n    selected.url = target.value\n    selected.info = target.value\n    setCurrentModel(selected)\n  }\n\n  const ShareRow = props => {\n    if (props.isOpen) {\n      return (\n        <div className=\"modalTop\">\n          <div className=\"leftSide fullSize\">\n            <Dropdown\n              className=\"fullSize\"\n              placeholder=\"Select a Model\"\n              options={options}\n              onChange={dropdownChange}\n              value={currentModel.value}\n            />\n          </div>\n          <div className=\"modalClose\">\n            <ProgressButton\n              className=\"modalProgressButton\"\n              onClick={async () => {\n                await props.onModelLoad(currentModel)\n              }}\n              onSuccess={props.hideModal}\n              onError={e => window.alert(e.message)}\n            >\n              Load\n            </ProgressButton>\n          </div>\n        </div>\n      )\n    } else {\n      return (\n        <center>\n          <h1>\n            <span role=\"img\" aria-label=\"done\">\n              👍\n            </span>\n          </h1>\n        </center>\n      )\n    }\n  }\n\n  return (\n    <Modal\n      key=\"modelModalInner\"\n      isOpen={props.isOpen}\n      onRequestClose={props.hideModal}\n      shouldCloseOnOverlayClick={false}\n      shouldCloseOnEscape={true}\n      closeTimeoutMS={750}\n      className=\"modal\"\n      overlayClassName=\"overlay\"\n      contentLabel=\"share modal\"\n    >\n      <div className=\"modalTop\">\n        <div className=\"leftSide\">\n          <h1>Load Model:</h1>\n        </div>\n        <div className=\"modalClose\">\n          <button className=\"navButton\" onClick={props.hideModal}>\n            🅧\n          </button>\n        </div>\n      </div>\n      <ShareRow {...props} />\n      <URLInput\n        key=\"urlInputComponent\"\n        show={currentModel.value === 'customurl'}\n        modelURL={modelURL}\n        urlCallback={urlCallback}\n      />\n      <div>\n        <a href={currentModel.link} target=\"_blank\" rel=\"noopener noreferrer\">\n          {currentModel.link}\n        </a>\n      </div>\n    </Modal>\n  )\n}\n","import React, { useState } from 'react'\n// modals\nimport Modal from 'react-modal'\n\n// example: https://i.imgur.com/PieUY1f.jpg\nconst isValidUrl = string => {\n  var res = string.match(\n    /(http(s)?:\\/\\/.)?(www\\.)?[-a-zA-Z0-9@:%._+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_+.~#?&//=]*)/g\n  )\n  return res !== null\n}\n\nconst ShareRow = props => {\n  const [inputURL, setInputURL] = useState('')\n  const [urlValid, setURLValid] = useState(false)\n  if (props.isOpen) {\n    return (\n      <div className=\"modalTop\">\n        <div className=\"leftSide\">\n          <input\n            type=\"text\"\n            className=\"shareBox\"\n            value={inputURL}\n            onChange={({ target }) => {\n              setInputURL(target.value)\n              setURLValid(isValidUrl(target.value))\n            }}\n          />\n        </div>\n        <div className=\"modalClose\">\n          <button\n            disabled={!urlValid}\n            className=\"modalButton\"\n            onClick={() => {\n              props.setInput(inputURL)\n              props.hideModal()\n            }}\n          >\n            use\n          </button>\n        </div>\n      </div>\n    )\n  } else {\n    return (\n      <center>\n        <h1>\n          <span role=\"img\" aria-label=\"done\">\n            👍\n          </span>\n        </h1>\n      </center>\n    )\n  }\n}\n\nexport default props => (\n  <Modal\n    isOpen={props.isOpen}\n    onRequestClose={props.hideModal}\n    shouldCloseOnOverlayClick={true}\n    shouldCloseOnEscape={true}\n    closeTimeoutMS={750}\n    className=\"modal\"\n    overlayClassName=\"overlay\"\n    contentLabel=\"share modal\"\n  >\n    <div className=\"modalTop\">\n      <div className=\"leftSide\">\n        <h1>Input Tensor URL:</h1>\n      </div>\n      <div className=\"modalClose\">\n        <button className=\"navButton\" onClick={props.hideModal}>\n          🅧\n        </button>\n      </div>\n    </div>\n    <ShareRow {...props} />\n  </Modal>\n)\n","import React from 'react'\n// FontAwesome\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport {\n  faPlay,\n  faAlignLeft,\n  faExternalLinkAlt,\n  faLayerGroup,\n  faCodeBranch,\n  faFileCode\n} from '@fortawesome/free-solid-svg-icons'\nimport { faGithub } from '@fortawesome/free-brands-svg-icons'\n// Get TF Version\nconst packageInfo = require('../../package.json')\nconst tfVersion = packageInfo.dependencies['@tensorflow/tfjs'].replace(\n  /([^.|\\d])/g,\n  ''\n)\n\nexport default props => (\n  <nav id=\"runNav\">\n    <div className=\"leftSide\">\n      <button\n        title=\"Run Code (shift + enter)\"\n        className=\"navButton\"\n        id=\"run\"\n        onClick={props.run}\n      >\n        <FontAwesomeIcon icon={faPlay} /> Run\n      </button>\n      <button\n        title=\"Reset Code\"\n        className=\"navButton\"\n        id=\"reset\"\n        onClick={props.reset}\n      >\n        <FontAwesomeIcon icon={faAlignLeft} /> Reset\n      </button>\n      <button\n        title=\"Share this playground\"\n        className=\"navButton\"\n        id=\"share\"\n        onClick={props.share}\n      >\n        <FontAwesomeIcon icon={faExternalLinkAlt} /> Share\n      </button>\n      <button\n        title=\"Load an external model\"\n        className=\"navButton\"\n        id=\"load\"\n        onClick={props.load}\n      >\n        <FontAwesomeIcon icon={faLayerGroup} /> Load Model\n      </button>\n    </div>\n    <div className=\"rightSide\">\n      <FontAwesomeIcon icon={faFileCode} />{' '}\n      <a\n        className=\"navLink\"\n        href={`https://js.tensorflow.org/api/${tfVersion}/`}\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        TensorFlow.js Docs\n      </a>\n      <FontAwesomeIcon icon={faGithub} />{' '}\n      <a\n        className=\"navLink\"\n        href=\"https://github.com/infinitered/tensorplayground\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        GitHub\n      </a>\n      <FontAwesomeIcon icon={faCodeBranch} />{' '}\n      <a\n        className=\"navLink\"\n        href=\"https://infinite.red/machinelearning\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        Learn\n      </a>\n    </div>\n  </nav>\n)\n","import React from 'react'\n// FontAwesome\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faTrashAlt } from '@fortawesome/free-solid-svg-icons'\n\nexport default props => (\n  <button\n    title=\"Clear Console\"\n    style={{ float: 'right' }}\n    className=\"navButton\"\n    id=\"clearConsole\"\n    onClick={props.clear}\n  >\n    <FontAwesomeIcon icon={faTrashAlt} /> Clear Console\n  </button>\n)\n","import * as React from 'react'\nimport { useRef, useEffect } from 'react'\nimport * as tf from '@tensorflow/tfjs'\n\nconst componentToHex = c => {\n  let hex = Number(c).toString(16)\n  if (hex.length < 2) {\n    hex = '0' + hex\n  }\n  return hex\n}\n\nconst toColorHex = (rgb, tensorType) => {\n  let r, g, b\n  // Handle 1 or 3 channel\n  if (rgb.length === 1) {\n    r = rgb[0]\n    g = rgb[0]\n    b = rgb[0]\n  } else {\n    ;[r, g, b] = rgb\n  }\n\n  // Handle float32\n  if (tensorType === 'float32') {\n    r = Math.round(r * 255)\n    g = Math.round(g * 255)\n    b = Math.round(b * 255)\n  }\n  return '#' + componentToHex(r) + componentToHex(g) + componentToHex(b)\n}\n\nconst ColorBlock = props => (\n  <div style={{ display: 'flex', flexDirection: 'row' }}>\n    <div\n      style={{\n        marginRight: '10px',\n        width: '15px',\n        height: '15px',\n        border: '1px solid white',\n        backgroundColor: props.color\n      }}\n    />\n    {props.color}\n  </div>\n)\n\nconst printTensor = (areaBox, tensor) => {\n  if (tensor) {\n    const printText = `Details of Tensor\n    Matrix Rank: ${tensor.rankType},\n    Shape: ${tensor.shape} (Height, Width, Channels)\n    This means ${tensor.shape[1]} blocks of ${\n      tensor.shape[2]\n    } color value(s) (of type ${tensor.dtype}), done ${tensor.shape[0]} times\n\n    Result ${tensor.toString()}\n    `\n    areaBox.value = printText\n  }\n}\n\nconst TensorColors = ({ aTensor }) => {\n  // shortcircuit\n  if (!aTensor) return null\n\n  let channelCount\n  const corners = tf.tidy(() => {\n    // dims\n    const height = aTensor.shape[0]\n    const width = aTensor.shape[1]\n    channelCount = aTensor.shape[2]\n    // 4 corners\n    const tl = tf.slice(aTensor, [0, 0, 0], [1, 1, channelCount])\n    const tr = tf.slice(aTensor, [0, width - 1, 0], [1, 1, channelCount])\n    const bl = tf.slice(aTensor, [height - 1, 0, 0], [1, 1, channelCount])\n    const br = tf.slice(\n      aTensor,\n      [height - 1, width - 1, 0],\n      [1, 1, channelCount]\n    )\n    // return all corners\n    return tf.stack([tl, tr, bl, br])\n  })\n  // bring tensor back to JS\n  const values = corners.dataSync()\n  const arr = Array.from(values)\n  corners.dispose() // clean up\n  // bring back to 2D array\n  let newArr = []\n  while (arr.length) newArr.push(arr.splice(0, channelCount))\n  const tensorType = aTensor.dtype\n\n  return (\n    <ul style={styles.pixelList}>\n      <li>\n        Top Left Pixel <ColorBlock color={toColorHex(newArr[0], tensorType)} />\n      </li>\n      <li>\n        Bottom Left Pixel{' '}\n        <ColorBlock color={toColorHex(newArr[2], tensorType)} />\n      </li>\n      <li>\n        Top Right Pixel <ColorBlock color={toColorHex(newArr[1], tensorType)} />\n      </li>\n      <li>\n        Bottom Right Pixel{' '}\n        <ColorBlock color={toColorHex(newArr[3], tensorType)} />\n      </li>\n    </ul>\n  )\n}\n\nexport default props => {\n  if (!props.tensor) return null\n  const tensorDisplay = useRef(null)\n  const tensorText = useRef(null)\n\n  useEffect(() => {\n    const updateDisplay = async () => {\n      if (props.tensor) {\n        printTensor(tensorText.current, props.tensor)\n        await tf.browser.toPixels(props.tensor, tensorDisplay.current)\n        if (props.selfDestruct) props.tensor.dispose()\n      }\n    }\n    updateDisplay() // call that async goodness\n  }, [props.tensor])\n\n  return (\n    <div style={styles.container}>\n      <canvas style={styles.canvas} ref={tensorDisplay} />\n      <div style={styles.column}>\n        <div style={styles.leftColumn}>\n          <TensorColors aTensor={props.tensor} />\n        </div>\n        <div style={styles.rightColumn}>\n          <textarea style={styles.displayText} ref={tensorText} readOnly>\n            {props.text}\n          </textarea>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nconst styles = {\n  container: {\n    display: 'flex',\n    flexDirection: 'column',\n    height: '100%'\n  },\n  column: {\n    display: 'flex',\n    justifyContent: 'space-between',\n    height: '100%',\n    marginRight: '6px'\n  },\n  leftColumn: {\n    // maxWidth: '50%'\n    // backgroundColor: \"yellow\"\n  },\n  rightColumn: {\n    display: 'flex',\n    flexDirection: 'column',\n    flex: 1\n  },\n  displayText: {\n    minWidth: '380px',\n    display: 'flex',\n    flexGrow: 1,\n    width: '100%',\n    backgroundColor: '#23252a',\n    color: '#9ea7ba',\n    fontSize: '1em',\n    fontFamily: 'monospace'\n  },\n  pixelList: {\n    columns: 2,\n    textAlign: 'left',\n    listStyle: 'none',\n    padding: '10px',\n    margin: 0,\n    color: 'white'\n  },\n  canvas: {\n    maxWidth: '100%',\n    alignSelf: 'center'\n  }\n}\n","import React from 'react'\nimport {\n  VictoryChart,\n  VictoryScatter,\n  VictoryTheme,\n  VictoryLabel\n} from 'victory'\n\nexport default props => (\n  <VictoryChart theme={VictoryTheme.material} padding={40}>\n    <VictoryScatter\n      animate={true}\n      style={{\n        parent: {\n          border: '1px solid #ccc'\n        },\n        data: {\n          fill: '#8662b0'\n        },\n        labels: {\n          fontSize: 15,\n          fill: '#8662b0',\n          padding: 15\n        }\n      }}\n      labels={datanum => datanum.y}\n      labelComponent={<VictoryLabel dx={10} />}\n      size={7}\n      data={props.chartData}\n    />\n  </VictoryChart>\n)\n","import React from 'react'\nimport ImageTensorInspector from './imageTensorInspector'\nimport * as stringify from 'json-stringify-safe'\nimport * as tf from '@tensorflow/tfjs'\nimport SimpleChart from './simpleChart'\n\nconst charterize = plotData => {\n  let plotReady\n  // If Nx2 it's plotable\n  if (plotData.shape[1] === 2) {\n    plotReady = []\n    const synced = plotData.dataSync()\n    for (let i = 0; i < plotData.size; i += 2) {\n      plotReady.push({\n        x: synced[i],\n        y: synced[i + 1]\n      })\n    }\n  } else if (plotData.shape[0] === 2) {\n    plotReady = []\n    const synced = plotData.dataSync()\n    const jumpSize = plotData.shape[1]\n    for (let i = 0; i < jumpSize; i++) {\n      plotReady.push({\n        x: synced[i],\n        y: synced[i + jumpSize]\n      })\n    }\n  }\n  if (plotReady) {\n    return <SimpleChart chartData={plotReady} />\n  }\n}\n\nexport default props => {\n  const { tensor } = props\n  if (!tensor) {\n    return null\n  } else if (tensor.rankType === '1') {\n    return (\n      <div className=\"tensorResultSection\">\n        <h3>Rank 1 Tensor</h3>\n        <pre>{tensor.toString()}</pre>\n      </div>\n    )\n  } else if (tensor.rankType === '2') {\n    return (\n      <div className=\"tensorResultSection\">\n        <h3>Rank 2 Tensor</h3>\n        <pre>{tensor.toString()}</pre>\n        {charterize(tensor)}\n      </div>\n    )\n  } else if (tensor.rankType === '3') {\n    return <ImageTensorInspector tensor={tensor} />\n  } else if (tensor.rankType === '4') {\n    return (\n      <div>\n        <h3 style={{ paddingLeft: 10 }}>\n          {tensor.shape[0]} images in a 4D Tensor\n        </h3>\n        {tf.unstack(tensor).map(t => (\n          <ImageTensorInspector tensor={t} selfDestruct />\n        ))}\n      </div>\n    )\n  } else {\n    return (\n      <div className=\"tensorResultSection\">\n        <pre>{stringify(tensor, null, 2)}</pre>\n      </div>\n    )\n  }\n}\n","import React, { useState, useEffect } from 'react'\n// modals\nimport Modal from 'react-modal'\nimport copyToClipboard from '../lib/copyToClipboard'\nimport { BitlyClient } from 'bitly'\n\nconst bitly = new BitlyClient(process.env.REACT_APP_BITLY_TOKEN, {})\n\nconst ShareRow = props => {\n  const [shareLink, setShareLink] = useState(window.location.href)\n\n  // onload\n  useEffect(() => {\n    const generateLink = async () => {\n      const shortLink = await bitly.shorten(window.location.href)\n      setShareLink(shortLink.url)\n    }\n    generateLink()\n  }, [])\n\n  if (props.isOpen) {\n    return (\n      <div className=\"modalTop\">\n        <div className=\"leftSide\">\n          <input type=\"text\" value={shareLink} className=\"shareBox\" readOnly />\n        </div>\n        <div className=\"modalClose\">\n          <button\n            className=\"modalButton\"\n            onClick={() => {\n              try {\n                copyToClipboard(shareLink)\n              } catch (e) {\n                throw e\n              }\n              props.hideModal()\n            }}\n          >\n            copy\n          </button>\n        </div>\n      </div>\n    )\n  } else {\n    return (\n      <center>\n        <h1>\n          <span role=\"img\" aria-label=\"done\">\n            👍\n          </span>\n        </h1>\n      </center>\n    )\n  }\n}\n\nexport default props => (\n  <Modal\n    isOpen={props.isOpen}\n    onRequestClose={props.hideModal}\n    shouldCloseOnOverlayClick={true}\n    shouldCloseOnEscape={true}\n    closeTimeoutMS={750}\n    className=\"modal\"\n    overlayClassName=\"overlay\"\n    contentLabel=\"share modal\"\n  >\n    <div className=\"modalTop\">\n      <div className=\"leftSide\">\n        <h1>Share Link:</h1>\n      </div>\n      <div className=\"modalClose\">\n        <button className=\"navButton\" onClick={props.hideModal}>\n          🅧\n        </button>\n      </div>\n    </div>\n    <ShareRow {...props} link={'loading'} />\n  </Modal>\n)\n","// https://hackernoon.com/copying-text-to-clipboard-with-javascript-df4d4988697f\nexport default str => {\n  const el = document.createElement('textarea') // Create a <textarea> element\n  el.value = str // Set its value to the string that you want copied\n  el.setAttribute('readonly', '') // Make it readonly to be tamper-proof\n  el.style.position = 'absolute'\n  el.style.left = '-9999px' // Move outside the screen to make it invisible\n  document.body.appendChild(el) // Append the <textarea> element to the HTML document\n  const selected =\n    document.getSelection().rangeCount > 0 // Check if there is any content selected previously\n      ? document.getSelection().getRangeAt(0) // Store selection if found\n      : false // Mark as false to know no selection existed before\n  el.select() // Select the <textarea> content\n  document.execCommand('copy') // Copy - only works as a result of a user action (e.g. click events)\n  document.body.removeChild(el) // Remove the <textarea> element\n  if (selected) {\n    // If a selection existed before copying\n    document.getSelection().removeAllRanges() // Unselect everything on the HTML document\n    document.getSelection().addRange(selected) // Restore the original selection\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}