{"version":3,"sources":["lib/convertURLtoTensor.js","App.js","lib/useMergeState.js","lib/addToConsoleLog.js","lib/startCodeCreator.js","components/tensorSelector.js","components/codeProfile.js","components/memoryStatus.js","components/modelModal.js","components/inputModal.js","components/runNav.js","components/clearButton.js","components/imageTensorInspector.js","components/results.js","components/shareModal.js","lib/copyToClipboard.js","serviceWorker.js","index.js","lib/formatKB.js","data/inputTensors.js"],"names":["_tensorflow_tfjs__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","__webpack_exports__","imageURL","channels","Promise","resolve","reject","img","Image","crossOrigin","src","onload","tf","fromPixels","onerror","e","playExplainer","event","iframe","target","getIframe","requestFullScreen","mozRequestFullScreen","webkitRequestFullScreen","bind","stopExplainer","document","fullscreen","exitFullscreen","msExitFullscreen","mozCancelFullScreen","webkitExitFullscreen","App","_useMergeState","useMergeState","userCode","currentError","activeTensor","displayTensor","codeProfile","inputTensorInfo","activeModel","activeModelInfo","shareVisible","modelVisible","inputVisible","consoleOutput","_useMergeState2","Object","_Users_gantman_Documents_Projects_ML_tensorplayground_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_2__","sandboxSettings","setSandboxSettings","addToConsoleLog","args","allThings","slice","call","map","arg","stringify","join","sharePlayground","urlParams","URLSearchParams","append","id","JSON","window","history","replaceState","concat","location","origin","pathname","runCode","_ref","_Users_gantman_Documents_Projects_ML_tensorplayground_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_1__","_Users_gantman_Documents_Projects_ML_tensorplayground_node_modules_babel_preset_react_app_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","a","mark","_callee2","timeInfo","wrap","_callee2$","_context2","prev","next","_callee","_callee$","_context","resultTensor","userFunc","eval","Error","dispose","message","sent","stop","t0","apply","this","arguments","tensorize","_ref3","_callee3","data","full","tensorResult","promiseArray","tensors","previousActive","_context3","Array","isArray","url","convertURLToTensor","all","x","abrupt","shape","console","log","_x","setupSandbox","_ref4","_callee4","settings","inputShape","code","modelInfo","killModel","model","loadFunction","startCode","_args4","_context4","length","undefined","type","fromTFHub","startCodeCreator","desc","_x2","useEffect","search","has","inputID","get","parse","localTensor","inputTensors","find","onkeydown","evt","shiftKey","keyCode","preventDefault","hideAllModals","react__WEBPACK_IMPORTED_MODULE_3___default","createElement","className","alt","react_progress_button__WEBPACK_IMPORTED_MODULE_8___default","onClick","_callee5","_context5","_components_tensorSelector__WEBPACK_IMPORTED_MODULE_20__","activeInputTensor","onSelect","react_youtube__WEBPACK_IMPORTED_MODULE_6__","videoId","onPlay","onEnd","onPause","opts","height","width","playerVars","modestbranding","rel","fs","_components_runNav__WEBPACK_IMPORTED_MODULE_27__","run","reset","share","load","react_ace__WEBPACK_IMPORTED_MODULE_10___default","placeholder","mode","theme","name","onChange","fontSize","showPrintMargin","showGutter","highlightActiveLine","value","setOptions","enableBasicAutocompletion","enableLiveAutocompletion","enableSnippets","showLineNumbers","tabSize","useWorker","_components_codeProfile__WEBPACK_IMPORTED_MODULE_21__","profile","react_tabs__WEBPACK_IMPORTED_MODULE_14__","_components_results__WEBPACK_IMPORTED_MODULE_23__","tensor","_components_clearButton__WEBPACK_IMPORTED_MODULE_28__","clear","_components_memoryStatus__WEBPACK_IMPORTED_MODULE_22__","_components_shareModal__WEBPACK_IMPORTED_MODULE_24__","isOpen","hideModal","_components_modelModal__WEBPACK_IMPORTED_MODULE_25__","key","onModelLoad","_ref6","_callee6","info","_context6","_x3","_components_inputModal__WEBPACK_IMPORTED_MODULE_26__","setInput","reducer","prevState","updater","_Users_gantman_Documents_Projects_ML_tensorplayground_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_0__","initialState","useReducer","thingToAdd","description","parameters","push","label","includes","react__WEBPACK_IMPORTED_MODULE_0__","props","tData","styleClasses","thumb","_lib_formatKB__WEBPACK_IMPORTED_MODULE_1__","_ref2","newBytes","newTensors","peakBytes","kernelMs","cleanPeak","timeMS","toFixed","style","styles","container","title","memBox","dataPoint","formatKB","backgroundColor","color","margin","borderBottom","textAlign","display","alignItems","flexDirection","flexWrap","_tensorflow_tfjs__WEBPACK_IMPORTED_MODULE_1__","_lib_formatKB__WEBPACK_IMPORTED_MODULE_2__","issues","_tf$memory","numBytes","numTensors","numDataBuffers","unreliable","reasons","toString","role","aria-label","options","items","link","getFullInfo","mKey","y","flat","URLInput","show","modelURL","urlCallback","_useState","useState","_useState2","currentModel","setCurrentModel","_useState3","_useState4","setModelURL","dropdownChange","selected","react_modal__WEBPACK_IMPORTED_MODULE_4___default","onRequestClose","shouldCloseOnOverlayClick","shouldCloseOnEscape","closeTimeoutMS","overlayClassName","contentLabel","react_dropdown__WEBPACK_IMPORTED_MODULE_5___default","react_progress_button__WEBPACK_IMPORTED_MODULE_7___default","onSuccess","onError","alert","href","ShareRow","_Users_gantman_Documents_Projects_ML_tensorplayground_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","inputURL","setInputURL","urlValid","setURLValid","react__WEBPACK_IMPORTED_MODULE_1___default","match","disabled","react_modal__WEBPACK_IMPORTED_MODULE_2___default","react__WEBPACK_IMPORTED_MODULE_0___default","n","_fortawesome_react_fontawesome__WEBPACK_IMPORTED_MODULE_1__","_fortawesome_free_solid_svg_icons__WEBPACK_IMPORTED_MODULE_2__","_fortawesome_free_brands_svg_icons__WEBPACK_IMPORTED_MODULE_3__","tfVersion","require","dependencies","replace","icon","faPlay","faAlignLeft","faExternalLinkAlt","faLayerGroup","faFileCode","faGithub","faCodeBranch","float","faTrashAlt","componentToHex","c","hex","Number","toColorHex","rgb","tensorType","r","g","b","_rgb","slicedToArray","Math","round","ColorBlock","react","marginRight","border","printTensor","areaBox","printText","rankType","dtype","TensorColors","channelCount","aTensor","corners","tl","tr","bl","br","values","dataSync","arr","from","newArr","splice","pixelList","imageTensorInspector_ColorBlock","imageTensorInspector","tensorDisplay","useRef","tensorText","asyncToGenerator","regenerator_default","current","toPixels","selfDestruct","updateDisplay","canvas","ref","column","leftColumn","imageTensorInspector_TensorColors","rightColumn","displayText","readOnly","text","justifyContent","flex","minWidth","flexGrow","fontFamily","columns","listStyle","padding","maxWidth","alignSelf","react_default","paddingLeft","t","bitly","BitlyClient","process","shareLink","setShareLink","shortLink","shorten","generateLink","str","el","setAttribute","position","left","body","appendChild","getSelection","rangeCount","getRangeAt","select","execCommand","removeChild","removeAllRanges","addRange","copyToClipboard","lib_default","shareModal_ShareRow","assign","Boolean","hostname","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6d7a8c74.chunk.js","sourcesContent":["import * as tf from '@tensorflow/tfjs'\n\nexport default (imageURL, channels) => {\n  return new Promise((resolve, reject) => {\n    const img = new Image()\n    img.crossOrigin = 'anonymous'\n    img.src = imageURL\n    img.onload = () => {\n      resolve(tf.browser.fromPixels(img, channels))\n    }\n    img.onerror = e => {\n      reject(e)\n    }\n  })\n}\n","import React, { useEffect } from 'react'\nimport './App.css'\nimport * as tf from '@tensorflow/tfjs'\nimport YouTube from 'react-youtube'\nimport * as stringify from 'json-stringify-safe'\n// Awesome button\nimport ProgressButton from 'react-progress-button'\nimport '../node_modules/react-progress-button/react-progress-button.css'\n\n// Code editor & styles\nimport AceEditor from 'react-ace'\nimport 'brace'\nimport 'brace/mode/javascript'\nimport 'brace/theme/dracula'\n\n// Tabs and style\nimport { Tab, Tabs, TabList, TabPanel } from 'react-tabs'\nimport 'react-tabs/style/react-tabs.css'\n\n// merge state custom hook\nimport useMergeState from './lib/useMergeState'\nimport convertURLToTensor from './lib/convertURLtoTensor'\nimport addToConsoleLog from './lib/addToConsoleLog'\nimport startCodeCreator from './lib/startCodeCreator'\n// Custom components\nimport TensorSelector from './components/tensorSelector'\nimport CodeProfile from './components/codeProfile'\nimport MemoryStatus from './components/memoryStatus'\nimport Results from './components/results'\nimport ShareModal from './components/shareModal'\nimport ModelModal from './components/modelModal'\nimport InputModal from './components/inputModal'\nimport RunNav from './components/runNav'\nimport ClearButton from './components/clearButton'\n// Input Tensor info etc.\nimport inputTensors from './data/inputTensors'\n\nconst playExplainer = event => {\n  const iframe = event.target.getIframe()\n  // fullscreen it\n  const requestFullScreen =\n    iframe.requestFullScreen ||\n    iframe.mozRequestFullScreen ||\n    iframe.webkitRequestFullScreen\n  if (requestFullScreen) {\n    requestFullScreen.bind(iframe)()\n  }\n}\n\nconst stopExplainer = () => {\n  if (document.fullscreen)\n    document.exitFullscreen\n      ? document.exitFullscreen()\n      : document.msExitFullscreen\n      ? document.msExitFullscreen()\n      : document.mozCancelFullScreen\n      ? document.mozCancelFullScreen()\n      : document.webkitExitFullscreen && document.webkitExitFullscreen()\n}\n\nfunction App() {\n  const [sandboxSettings, setSandboxSettings] = useMergeState({\n    userCode: '',\n    currentError: null,\n    activeTensor: null,\n    displayTensor: null,\n    codeProfile: null,\n    inputTensorInfo: null,\n    activeModel: null,\n    activeModelInfo: {},\n    shareVisible: false,\n    modelVisible: false,\n    inputVisible: false,\n    consoleOutput: ''\n  })\n\n  // Jump in on console.log and grab it\n  addToConsoleLog(args => {\n    // Converts args into regular array\n    const arrayArgs = [].slice.call(args)\n    // switch objects to string version of that object\n    const arrayStyleArgs = arrayArgs.map(arg =>\n      typeof arg === 'object' ? stringify(arg, null, 2) : arg\n    )\n    // breaks multiple args into newlines\n    const allThings = '\\n' + arrayStyleArgs.join('\\n')\n    setSandboxSettings({\n      consoleOutput: sandboxSettings.consoleOutput + allThings\n    })\n  })\n\n  const sharePlayground = () => {\n    const { userCode, inputTensorInfo, activeModelInfo } = sandboxSettings\n    let urlParams = new URLSearchParams()\n    urlParams.append('code', userCode)\n    urlParams.append('inputTensor', inputTensorInfo.id)\n    urlParams.append('modelInfo', JSON.stringify(activeModelInfo))\n    if (window.history.replaceState) {\n      window.history.replaceState(\n        'code',\n        'Tensor Playground',\n        `${window.location.origin}${window.location.pathname}?${urlParams}`\n      )\n    }\n  }\n\n  const runCode = async () => {\n    try {\n      sharePlayground() // update URL\n      let codeProfile\n      const timeInfo = await tf.time(async () => {\n        codeProfile = await tf.profile(() => {\n          try {\n            const resultTensor = tf.tidy(() => {\n              const userFunc = eval(sandboxSettings.userCode)\n              return userFunc(\n                tf,\n                sandboxSettings.activeTensor,\n                sandboxSettings.activeModel\n              )\n            })\n            // Error if sandbox was empty\n            if (!resultTensor) {\n              tf.disposeVariables()\n              throw new Error('Nothing was returned from the sandbox!')\n            }\n            // dispose current display if not used\n            if (\n              resultTensor !== sandboxSettings.displayTensor &&\n              sandboxSettings.displayTensor !== sandboxSettings.activeTensor\n            )\n              sandboxSettings.displayTensor &&\n                sandboxSettings.displayTensor.dispose()\n            setSandboxSettings({\n              displayTensor: resultTensor,\n              currentError: null\n            })\n          } catch (e) {\n            setSandboxSettings({ currentError: e.message, displayTensor: null })\n          }\n        })\n      })\n      if (codeProfile) codeProfile.timeInfo = timeInfo\n      setSandboxSettings({ codeProfile })\n    } catch (e) {\n      setSandboxSettings({ currentError: e.message, displayTensor: null })\n    }\n  }\n\n  const tensorize = async data => {\n    const { full, channels } = data\n\n    try {\n      // pre-cleanup\n      tf.disposeVariables()\n      let tensorResult\n      if (Array.isArray(full)) {\n        const promiseArray = full.map(url => convertURLToTensor(url, channels))\n        const tensors = await Promise.all(promiseArray)\n        // Create batch tensor\n        tensorResult = tf.stack(tensors)\n        // reclaim original tensor memory\n        tensors.map(x => x.dispose())\n      } else if (!full) {\n        tensorResult = null\n      } else {\n        tensorResult = await convertURLToTensor(full, channels)\n      }\n      let previousActive = sandboxSettings.activeTensor\n      sandboxSettings.displayTensor && sandboxSettings.displayTensor.dispose()\n      setSandboxSettings({\n        activeTensor: tensorResult,\n        displayTensor: null,\n        currentError: null\n      })\n      if (previousActive) previousActive.dispose()\n      return tensorResult && tensorResult.shape\n    } catch (e) {\n      setSandboxSettings({ currentError: `Unable to load: ${full}` })\n      console.log(e.message)\n    }\n  }\n\n  const setupSandbox = async (data, settings = {}) => {\n    // kickoff tensorization of input\n    const inputShape = await tensorize(data)\n    const { code, modelInfo, killModel } = settings\n    let model = sandboxSettings.activeModel\n    let activeModelInfo = modelInfo\n      ? modelInfo\n      : sandboxSettings.activeModelInfo\n\n    if (killModel) {\n      // cleanup\n      if (model) tf.dispose(model)\n      model = null\n      activeModelInfo = {}\n    }\n\n    // If we were passed info but no model, load the model\n    if (modelInfo && modelInfo.url) {\n      const loadFunction =\n        modelInfo.type === 'graph' ? tf.loadGraphModel : tf.loadLayersModel\n      // out with the old (if it exists)\n      if (model) tf.dispose(model)\n      // in with the new\n      model = await loadFunction(modelInfo.url, {\n        fromTFHub: modelInfo.fromTFHub\n      })\n    }\n\n    // creates teh appropriate start code\n    const startCode = startCodeCreator(\n      data.desc,\n      inputShape,\n      activeModelInfo,\n      code\n    )\n\n    // store it al!\n    setSandboxSettings({\n      codeProfile: null,\n      userCode: startCode,\n      inputTensorInfo: data,\n      activeModelInfo: activeModelInfo,\n      activeModel: model,\n      // close modals\n      shareVisible: false,\n      modelVisible: false,\n      inputVisible: false,\n      consoleOutput: ''\n    })\n  }\n\n  // onload\n  useEffect(() => {\n    let urlParams = new URLSearchParams(window.location.search)\n    if (urlParams.has('code') && urlParams.has('inputTensor')) {\n      // setup sandbox based on querystring\n      const inputID = urlParams.get('inputTensor')\n      const modelInfo = JSON.parse(urlParams.get('modelInfo'))\n      let localTensor = inputTensors.find(x => x.id === inputID)\n      const inputTensorInfo = localTensor || {\n        id: inputID,\n        full: inputID,\n        desc: inputID\n      }\n      setupSandbox(inputTensorInfo, { code: urlParams.get('code'), modelInfo })\n    } else {\n      // initialize to first input\n      setupSandbox(inputTensors[0])\n    }\n  }, [])\n\n  // enable shift + enter shortcut (Memoized)\n  // moving to useEffect loses access to state from runCode\n  document.onkeydown = evt => {\n    evt = evt || window.event\n    if (evt.shiftKey && evt.keyCode === 13) {\n      runCode()\n      evt.preventDefault()\n    }\n  }\n\n  const hideAllModals = () => {\n    setSandboxSettings({\n      shareVisible: false,\n      modelVisible: false,\n      inputVisible: false\n    })\n  }\n\n  return (\n    <div className=\"App\">\n      <header>\n        <div className=\"topBar\">\n          <div className=\"leftSide\">\n            <img\n              src=\"./logo.png\"\n              className=\"logo\"\n              alt=\"tensorplayground logo\"\n            />\n            <div className=\"instructions\">\n              <span>Select your input tensor or</span>\n              <ProgressButton\n                className=\"inputTensorBtn\"\n                onClick={async () => setSandboxSettings({ inputVisible: true })}\n              >\n                Add URL\n              </ProgressButton>\n            </div>\n            <div className=\"inputsPicker\">\n              <TensorSelector\n                activeInputTensor={sandboxSettings.inputTensorInfo}\n                onSelect={setupSandbox}\n                inputTensors={inputTensors}\n              />\n            </div>\n          </div>\n          <div className=\"rightSide\">\n            <div className=\"explainerVideo\">\n              <YouTube\n                videoId=\"hdAX6ORhihA\"\n                onPlay={playExplainer}\n                onEnd={stopExplainer}\n                onPause={stopExplainer}\n                opts={{\n                  height: 115,\n                  width: 200,\n                  playerVars:\n                    // https://developers.google.com/youtube/player_parameters\n                    { modestbranding: 1, rel: 0, fs: 0 }\n                }}\n              />\n              <span>What is TensorPlayground?</span>\n            </div>\n          </div>\n        </div>\n        <RunNav\n          run={runCode}\n          reset={() => {\n            setupSandbox(sandboxSettings.inputTensorInfo, { killModel: true })\n          }}\n          share={() => {\n            sharePlayground()\n            setSandboxSettings({ shareVisible: true })\n          }}\n          load={() => setSandboxSettings({ modelVisible: true })}\n        />\n      </header>\n      <main>\n        <div className=\"codeContainer\">\n          <div className=\"userCode\">\n            <AceEditor\n              placeholder=\"Code goes here\"\n              mode=\"javascript\"\n              theme=\"dracula\"\n              name=\"codeBlock\"\n              // Memoize the callback for efficiency\n              onChange={code => setSandboxSettings({ userCode: code })}\n              fontSize={14}\n              width=\"100%\"\n              height=\"100%\"\n              showPrintMargin={false}\n              showGutter={true}\n              highlightActiveLine={true}\n              value={sandboxSettings.userCode}\n              setOptions={{\n                enableBasicAutocompletion: false,\n                enableLiveAutocompletion: true,\n                enableSnippets: false,\n                showLineNumbers: true,\n                tabSize: 2,\n                useWorker: false\n              }}\n            />\n          </div>\n          <div className=\"errorBox\">\n            <p className=\"errorMessage\">{sandboxSettings.currentError}</p>\n          </div>\n          <CodeProfile profile={sandboxSettings.codeProfile} />\n        </div>\n        <div className=\"resultContainer\">\n          <Tabs>\n            <TabList>\n              <Tab>Result Tensor</Tab>\n              <Tab>Console Logs</Tab>\n            </TabList>\n            <TabPanel>\n              <Results tensor={sandboxSettings.displayTensor} />\n            </TabPanel>\n            <TabPanel>\n              <ClearButton\n                clear={() => setSandboxSettings({ consoleOutput: '' })}\n              />\n              <pre id=\"consoleOut\">{sandboxSettings.consoleOutput}</pre>\n            </TabPanel>\n          </Tabs>\n        </div>\n      </main>\n      <footer>\n        <MemoryStatus />\n      </footer>\n      <ShareModal\n        isOpen={sandboxSettings.shareVisible}\n        hideModal={hideAllModals}\n      />\n      <ModelModal\n        key=\"ModelModal\"\n        isOpen={sandboxSettings.modelVisible}\n        hideModal={hideAllModals}\n        onModelLoad={async info => {\n          await setupSandbox(sandboxSettings.inputTensorInfo, {\n            modelInfo: info\n          })\n        }}\n      />\n      <InputModal\n        isOpen={sandboxSettings.inputVisible}\n        hideModal={hideAllModals}\n        setInput={url => setupSandbox({ id: url, full: url, desc: url })}\n      />\n    </div>\n  )\n}\n\nexport default App\n","import { useReducer } from 'react'\n\nconst reducer = (prevState, updater) =>\n  typeof updater === 'function'\n    ? { ...prevState, ...updater(prevState) }\n    : { ...prevState, ...updater }\n\nconst useMergeState = (initialState = {}) => useReducer(reducer, initialState)\n\nexport default useMergeState\n","let log = console.log\n\nexport default thingToAdd => {\n  console.log = function() {\n    log(arguments)\n    thingToAdd(arguments)\n    log.apply(log, arguments)\n  }\n}\n","const returnCode = params =>\n  params.includes('aTensor')\n    ? 'return aTensor'\n    : 'return tf.fill([400, 400, 3], 1)'\n\nexport default (description, inputShape, activeModelInfo, code) => {\n  let startCode\n  let parameters = ['tf']\n  // Handle code setup\n  if (code) {\n    startCode = code\n  } else {\n    // Setup code\n    startCode = `// TensorPlayground.com${'\\n'}`\n    startCode += `// ${description}${'\\n'}`\n\n    // if we have an input tensor, add comment\n    if (inputShape) {\n      startCode += `// INPUT TENSOR SHAPE: [${inputShape}]${'\\n'}`\n      parameters.push('aTensor')\n    }\n\n    // If they have a model add that\n    if (activeModelInfo.label) {\n      startCode += `// MODEL: ${activeModelInfo.label} ${\n        activeModelInfo.info\n      }${'\\n'}`\n      parameters.push('model')\n    }\n\n    startCode += `${'\\n'}(${parameters.join(', ')}) => {\n  // return tensor to show\n  ${returnCode(parameters)}\n}`\n  }\n  return startCode\n}\n","import * as React from 'react'\n\nexport default props => {\n  const InputTensors = props =>\n    props.inputTensors.map(tData => {\n      let styleClasses =\n        props.activeInputTensor && props.activeInputTensor.id === tData.id\n          ? 'tensorBox selectedBox'\n          : 'tensorBox'\n      return (\n        <div\n          key={tData.id}\n          id={tData.id}\n          className={styleClasses}\n          onClick={() => props.onSelect(tData)}\n        >\n          <img src={tData.thumb} alt={tData.desc} />\n          <span>{tData.desc}</span>\n        </div>\n      )\n    })\n\n  return (\n    <div className=\"inputTensors\">\n      <InputTensors {...props} />\n    </div>\n  )\n}\n","import * as React from 'react'\nimport formatKB from '../lib/formatKB'\n\nexport default ({ profile }) => {\n  // grab values, but default to zero\n  const { newBytes, newTensors, peakBytes, timeInfo } = profile\n    ? profile\n    : { newBytes: 0, newTensors: 0, peakBytes: 0, timeInfo: { kernelMs: 0 } }\n  const cleanPeak = peakBytes < 0 ? 0 : peakBytes\n  const timeMS = timeInfo.kernelMs.toFixed(2)\n  return (\n    <div style={styles.container}>\n      <h3 style={styles.title}>Code Result Memory</h3>\n      <div style={styles.memBox}>\n        <div style={styles.dataPoint}>\n          <p>\n            <strong>New Bytes:</strong> {formatKB(newBytes)} KB\n          </p>\n        </div>\n        <div style={styles.dataPoint}>\n          <p>\n            <strong>New Tensors:</strong> {newTensors}\n          </p>\n        </div>\n        <div style={styles.dataPoint}>\n          <p>\n            <strong>Peak Bytes:</strong> {formatKB(cleanPeak)} KB\n          </p>\n        </div>\n        <div style={styles.dataPoint}>\n          <p>\n            <strong>Execution:</strong> {timeMS} ms\n          </p>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nconst styles = {\n  container: {\n    backgroundColor: '#3a3d4f',\n    color: '#fff'\n  },\n  title: {\n    margin: 0,\n    borderBottom: '1px solid #44475c',\n    backgroundColor: '#3f4255',\n    textAlign: 'center',\n    fontSize: '1em'\n  },\n  memBox: {\n    display: 'flex',\n    alignItems: 'flex-start',\n    flexDirection: 'row',\n    flexWrap: 'nowrap',\n    fontSize: '0.9em'\n  },\n  dataPoint: {\n    // Big so it forces spacing in nowrap\n    width: '100%',\n    textAlign: 'center'\n  }\n}\n","import * as React from 'react'\nimport * as tf from '@tensorflow/tfjs'\nimport formatKB from '../lib/formatKB'\n\nexport default props => {\n  const {\n    numBytes,\n    numTensors,\n    numDataBuffers,\n    unreliable,\n    reasons\n  } = tf.memory()\n  let issues\n  if (unreliable) {\n    issues = (\n      <div className=\"tooltip\">\n        <span className=\"tooltiptext\">{reasons && reasons.toString()}</span>\n        <span role=\"img\" aria-label=\"issues\">\n          ❌\n        </span>\n      </div>\n    )\n  }\n  return (\n    <div style={styles.container}>\n      <h3 style={styles.title}>Browser Tensor Memory</h3>\n      <div style={styles.memBox}>\n        {issues}\n        <div style={styles.dataPoint}>\n          <p>\n            <strong>Tensor Bytes:</strong> {formatKB(numBytes)} KB\n          </p>\n        </div>\n        <div style={styles.dataPoint}>\n          <p>\n            <strong>Tensors:</strong> {numTensors}\n          </p>\n        </div>\n        <div style={styles.dataPoint}>\n          <p>\n            <strong>Data Buffers:</strong> {numDataBuffers}\n          </p>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nconst styles = {\n  container: {\n    backgroundColor: '#181f27',\n    color: '#fff',\n    textAlign: 'center'\n  },\n  title: {\n    margin: 0,\n    borderBottom: '1px solid #2f3d4e',\n    backgroundColor: '#242e3b',\n    fontSize: '1em'\n  },\n  memBox: {\n    display: 'flex',\n    alignItems: 'flex-start',\n    flexDirection: 'row',\n    flexWrap: 'nowrap',\n    fontSize: '0.9em'\n  },\n  dataPoint: {\n    // Big so it forces spacing in nowrap\n    width: '100%'\n  }\n}\n","import React, { useState } from 'react'\n// modals\nimport Modal from 'react-modal'\n// dropdown\nimport Dropdown from 'react-dropdown'\nimport 'react-dropdown/style.css'\n// Awesome button\nimport ProgressButton from 'react-progress-button'\nimport '../../node_modules/react-progress-button/react-progress-button.css'\n\nconst options = [\n  {\n    value: 'customurl',\n    label: 'Custom URL',\n    className: 'customURL',\n    fromTFHub: false\n  },\n  {\n    type: 'group',\n    name: 'TF Hub Models',\n    items: [\n      {\n        value: 'mobilenetv2',\n        label: 'Mobilenet v2',\n        info: 'Expects [batch, 224, 224, 3]',\n        link: 'https://arxiv.org/abs/1801.04381',\n        url:\n          'https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/classification/2',\n        fromTFHub: true,\n        type: 'graph'\n      },\n      {\n        value: 'inceptionv3',\n        label: 'Inception v3',\n        info: 'Expects [batch, 299, 200, 3]',\n        link: 'http://arxiv.org/abs/1512.00567',\n        url: 'https://tfhub.dev/google/imagenet/inception_v3/classification/1',\n        fromTFHub: true,\n        type: 'graph'\n      },\n      {\n        value: 'resnetv2',\n        label: 'Resnet v2',\n        info: 'Expects [batch, 224, 224, 3]',\n        link: 'https://arxiv.org/abs/1603.05027',\n        url: 'https://tfhub.dev/google/imagenet/resnet_v2_50/classification/1',\n        fromTFHub: true,\n        type: 'graph'\n      }\n    ]\n  },\n  {\n    type: 'group',\n    name: 'Community Models',\n    items: [\n      {\n        value: 'nsfwjs',\n        label: 'NSFWJS',\n        info: 'Expects [batch, 224, 224, 3]',\n        link: 'https://github.com/GantMan/nsfw_model',\n        url:\n          'https://s3.amazonaws.com/ir_public/nsfwjscdn/TFJS_nsfw_mobilenet/tfjs_quant_nsfw_mobilenet/model.json',\n        fromTFHub: false,\n        type: 'layers'\n      }\n    ]\n  }\n]\n\nconst getFullInfo = mKey => {\n  const choices = options\n    .map(x =>\n      x.value ? x : null || (x.items && x.items.map(y => (y.value ? y : null)))\n    )\n    .flat()\n  return choices.find(x => x.value === mKey)\n}\n\nconst URLInput = props => {\n  if (props.show) {\n    return (\n      <div className=\"modalTop\" key=\"urlInputDiv\">\n        <p className=\"modeLabel\">URL:</p>\n        <input\n          type=\"text\"\n          name=\"modelURLInput\"\n          key=\"modelURLInput\"\n          id=\"modelInput\"\n          value={props.modelURL}\n          onChange={props.urlCallback}\n        />\n      </div>\n    )\n  } else {\n    return <div />\n  }\n}\n\nexport default props => {\n  const [currentModel, setCurrentModel] = useState({})\n  const [modelURL, setModelURL] = useState('')\n\n  const dropdownChange = ({ value }) => {\n    const selected = getFullInfo(value)\n    setCurrentModel(selected)\n  }\n\n  const urlCallback = ({ target }) => {\n    setModelURL(target.value)\n    let selected = getFullInfo('customurl')\n    selected.url = target.value\n    selected.info = target.value\n    setCurrentModel(selected)\n  }\n\n  const ShareRow = props => {\n    if (props.isOpen) {\n      return (\n        <div className=\"modalTop\">\n          <div className=\"leftSide fullSize\">\n            <Dropdown\n              className=\"fullSize\"\n              placeholder=\"Select a Model\"\n              options={options}\n              onChange={dropdownChange}\n              value={currentModel.value}\n            />\n          </div>\n          <div className=\"modalClose\">\n            <ProgressButton\n              className=\"modalProgressButton\"\n              onClick={async () => {\n                await props.onModelLoad(currentModel)\n              }}\n              onSuccess={props.hideModal}\n              onError={e => window.alert(e.message)}\n            >\n              Load\n            </ProgressButton>\n          </div>\n        </div>\n      )\n    } else {\n      return (\n        <center>\n          <h1>\n            <span role=\"img\" aria-label=\"done\">\n              👍\n            </span>\n          </h1>\n        </center>\n      )\n    }\n  }\n\n  return (\n    <Modal\n      key=\"modelModalInner\"\n      isOpen={props.isOpen}\n      onRequestClose={props.hideModal}\n      shouldCloseOnOverlayClick={false}\n      shouldCloseOnEscape={true}\n      closeTimeoutMS={750}\n      className=\"modal\"\n      overlayClassName=\"overlay\"\n      contentLabel=\"share modal\"\n    >\n      <div className=\"modalTop\">\n        <div className=\"leftSide\">\n          <h1>Load Model:</h1>\n        </div>\n        <div className=\"modalClose\">\n          <button className=\"navButton\" onClick={props.hideModal}>\n            🅧\n          </button>\n        </div>\n      </div>\n      <ShareRow {...props} />\n      <URLInput\n        key=\"urlInputComponent\"\n        show={currentModel.value === 'customurl'}\n        modelURL={modelURL}\n        urlCallback={urlCallback}\n      />\n      <div>\n        <a href={currentModel.link} target=\"_blank\" rel=\"noopener noreferrer\">\n          {currentModel.link}\n        </a>\n      </div>\n    </Modal>\n  )\n}\n","import React, { useState } from 'react'\n// modals\nimport Modal from 'react-modal'\n\n// example: https://i.imgur.com/PieUY1f.jpg\nconst isValidUrl = string => {\n  var res = string.match(\n    /(http(s)?:\\/\\/.)?(www\\.)?[-a-zA-Z0-9@:%._+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_+.~#?&//=]*)/g\n  )\n  return res !== null\n}\n\nconst ShareRow = props => {\n  const [inputURL, setInputURL] = useState('')\n  const [urlValid, setURLValid] = useState(false)\n  if (props.isOpen) {\n    return (\n      <div className=\"modalTop\">\n        <div className=\"leftSide\">\n          <input\n            type=\"text\"\n            className=\"shareBox\"\n            value={inputURL}\n            onChange={({ target }) => {\n              setInputURL(target.value)\n              setURLValid(isValidUrl(target.value))\n            }}\n          />\n        </div>\n        <div className=\"modalClose\">\n          <button\n            disabled={!urlValid}\n            className=\"modalButton\"\n            onClick={() => {\n              props.setInput(inputURL)\n              props.hideModal()\n            }}\n          >\n            use\n          </button>\n        </div>\n      </div>\n    )\n  } else {\n    return (\n      <center>\n        <h1>\n          <span role=\"img\" aria-label=\"done\">\n            👍\n          </span>\n        </h1>\n      </center>\n    )\n  }\n}\n\nexport default props => (\n  <Modal\n    isOpen={props.isOpen}\n    onRequestClose={props.hideModal}\n    shouldCloseOnOverlayClick={true}\n    shouldCloseOnEscape={true}\n    closeTimeoutMS={750}\n    className=\"modal\"\n    overlayClassName=\"overlay\"\n    contentLabel=\"share modal\"\n  >\n    <div className=\"modalTop\">\n      <div className=\"leftSide\">\n        <h1>Input Tensor URL:</h1>\n      </div>\n      <div className=\"modalClose\">\n        <button className=\"navButton\" onClick={props.hideModal}>\n          🅧\n        </button>\n      </div>\n    </div>\n    <ShareRow {...props} />\n  </Modal>\n)\n","import React from 'react'\n// FontAwesome\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport {\n  faPlay,\n  faAlignLeft,\n  faExternalLinkAlt,\n  faLayerGroup,\n  faCodeBranch,\n  faFileCode\n} from '@fortawesome/free-solid-svg-icons'\nimport { faGithub } from '@fortawesome/free-brands-svg-icons'\n// Get TF Version\nconst packageInfo = require('../../package.json')\nconst tfVersion = packageInfo.dependencies['@tensorflow/tfjs'].replace(\n  /([^.|\\d])/g,\n  ''\n)\n\nexport default props => (\n  <nav id=\"runNav\">\n    <div className=\"leftSide\">\n      <button\n        title=\"Run Code (shift + enter)\"\n        className=\"navButton\"\n        id=\"run\"\n        onClick={props.run}\n      >\n        <FontAwesomeIcon icon={faPlay} /> Run\n      </button>\n      <button\n        title=\"Reset Code\"\n        className=\"navButton\"\n        id=\"reset\"\n        onClick={props.reset}\n      >\n        <FontAwesomeIcon icon={faAlignLeft} /> Reset\n      </button>\n      <button\n        title=\"Share this playground\"\n        className=\"navButton\"\n        id=\"share\"\n        onClick={props.share}\n      >\n        <FontAwesomeIcon icon={faExternalLinkAlt} /> Share\n      </button>\n      <button\n        title=\"Load an external model\"\n        className=\"navButton\"\n        id=\"load\"\n        onClick={props.load}\n      >\n        <FontAwesomeIcon icon={faLayerGroup} /> Load Model\n      </button>\n    </div>\n    <div className=\"rightSide\">\n      <FontAwesomeIcon icon={faFileCode} />{' '}\n      <a\n        className=\"navLink\"\n        href={`https://js.tensorflow.org/api/${tfVersion}/`}\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        TensorFlow.js Docs\n      </a>\n      <FontAwesomeIcon icon={faGithub} />{' '}\n      <a\n        className=\"navLink\"\n        href=\"https://github.com/infinitered/tensorplayground\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        GitHub\n      </a>\n      <FontAwesomeIcon icon={faCodeBranch} />{' '}\n      <a\n        className=\"navLink\"\n        href=\"https://infinite.red/machinelearning\"\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n      >\n        Learn\n      </a>\n    </div>\n  </nav>\n)\n","import React from 'react'\n// FontAwesome\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faTrashAlt } from '@fortawesome/free-solid-svg-icons'\n\nexport default props => (\n  <button\n    title=\"Clear Console\"\n    style={{ float: 'right' }}\n    className=\"navButton\"\n    id=\"clearConsole\"\n    onClick={props.clear}\n  >\n    <FontAwesomeIcon icon={faTrashAlt} /> Clear Console\n  </button>\n)\n","import * as React from 'react'\nimport { useRef, useEffect } from 'react'\nimport * as tf from '@tensorflow/tfjs'\n\nconst componentToHex = c => {\n  let hex = Number(c).toString(16)\n  if (hex.length < 2) {\n    hex = '0' + hex\n  }\n  return hex\n}\n\nconst toColorHex = (rgb, tensorType) => {\n  let r, g, b\n  // Handle 1 or 3 channel\n  if (rgb.length === 1) {\n    r = rgb[0]\n    g = rgb[0]\n    b = rgb[0]\n  } else {\n    ;[r, g, b] = rgb\n  }\n\n  // Handle float32\n  if (tensorType === 'float32') {\n    r = Math.round(r * 255)\n    g = Math.round(g * 255)\n    b = Math.round(b * 255)\n  }\n  return '#' + componentToHex(r) + componentToHex(g) + componentToHex(b)\n}\n\nconst ColorBlock = props => (\n  <div style={{ display: 'flex', flexDirection: 'row' }}>\n    <div\n      style={{\n        marginRight: '10px',\n        width: '15px',\n        height: '15px',\n        border: '1px solid white',\n        backgroundColor: props.color\n      }}\n    />\n    {props.color}\n  </div>\n)\n\nconst printTensor = (areaBox, tensor) => {\n  if (tensor) {\n    const printText = `Details of Tensor\n    Matrix Rank: ${tensor.rankType},\n    Shape: ${tensor.shape} (Height, Width, Channels)\n    This means ${tensor.shape[1]} blocks of ${\n      tensor.shape[2]\n    } color value(s) (of type ${tensor.dtype}), done ${tensor.shape[0]} times\n\n    Result ${tensor.toString()}\n    `\n    areaBox.value = printText\n  }\n}\n\nconst TensorColors = ({ aTensor }) => {\n  // shortcircuit\n  if (!aTensor) return null\n\n  let channelCount\n  const corners = tf.tidy(() => {\n    // dims\n    const height = aTensor.shape[0]\n    const width = aTensor.shape[1]\n    channelCount = aTensor.shape[2]\n    // 4 corners\n    const tl = tf.slice(aTensor, [0, 0, 0], [1, 1, channelCount])\n    const tr = tf.slice(aTensor, [0, width - 1, 0], [1, 1, channelCount])\n    const bl = tf.slice(aTensor, [height - 1, 0, 0], [1, 1, channelCount])\n    const br = tf.slice(\n      aTensor,\n      [height - 1, width - 1, 0],\n      [1, 1, channelCount]\n    )\n    // return all corners\n    return tf.stack([tl, tr, bl, br])\n  })\n  // bring tensor back to JS\n  const values = corners.dataSync()\n  const arr = Array.from(values)\n  corners.dispose() // clean up\n  // bring back to 2D array\n  let newArr = []\n  while (arr.length) newArr.push(arr.splice(0, channelCount))\n  const tensorType = aTensor.dtype\n\n  return (\n    <ul style={styles.pixelList}>\n      <li>\n        Top Left Pixel <ColorBlock color={toColorHex(newArr[0], tensorType)} />\n      </li>\n      <li>\n        Bottom Left Pixel{' '}\n        <ColorBlock color={toColorHex(newArr[2], tensorType)} />\n      </li>\n      <li>\n        Top Right Pixel <ColorBlock color={toColorHex(newArr[1], tensorType)} />\n      </li>\n      <li>\n        Bottom Right Pixel{' '}\n        <ColorBlock color={toColorHex(newArr[3], tensorType)} />\n      </li>\n    </ul>\n  )\n}\n\nexport default props => {\n  if (!props.tensor) return null\n  const tensorDisplay = useRef(null)\n  const tensorText = useRef(null)\n\n  useEffect(() => {\n    const updateDisplay = async () => {\n      if (props.tensor) {\n        printTensor(tensorText.current, props.tensor)\n        await tf.browser.toPixels(props.tensor, tensorDisplay.current)\n        if (props.selfDestruct) props.tensor.dispose()\n      }\n    }\n    updateDisplay() // call that async goodness\n  }, [props.tensor])\n\n  return (\n    <div style={styles.container}>\n      <canvas style={styles.canvas} ref={tensorDisplay} />\n      <div style={styles.column}>\n        <div style={styles.leftColumn}>\n          <TensorColors aTensor={props.tensor} />\n        </div>\n        <div style={styles.rightColumn}>\n          <textarea style={styles.displayText} ref={tensorText} readOnly>\n            {props.text}\n          </textarea>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nconst styles = {\n  container: {\n    display: 'flex',\n    flexDirection: 'column',\n    height: '100%'\n  },\n  column: {\n    display: 'flex',\n    justifyContent: 'space-between',\n    height: '100%',\n    marginRight: '6px'\n  },\n  leftColumn: {\n    // maxWidth: '50%'\n    // backgroundColor: \"yellow\"\n  },\n  rightColumn: {\n    display: 'flex',\n    flexDirection: 'column',\n    flex: 1\n  },\n  displayText: {\n    minWidth: '380px',\n    display: 'flex',\n    flexGrow: 1,\n    width: '100%',\n    backgroundColor: '#23252a',\n    color: '#9ea7ba',\n    fontSize: '1em',\n    fontFamily: 'monospace'\n  },\n  pixelList: {\n    columns: 2,\n    textAlign: 'left',\n    listStyle: 'none',\n    padding: '10px',\n    margin: 0,\n    color: 'white'\n  },\n  canvas: {\n    maxWidth: '100%',\n    alignSelf: 'center'\n  }\n}\n","import React from 'react'\nimport ImageTensorInspector from './imageTensorInspector'\nimport * as tf from '@tensorflow/tfjs'\n\nexport default props => {\n  const { tensor } = props\n  if (!tensor) {\n    return null\n  } else if (tensor.rankType === '3') {\n    return <ImageTensorInspector tensor={tensor} />\n  } else if (tensor.rankType === '4') {\n    return (\n      <div>\n        <h3 style={{ paddingLeft: 10 }}>\n          {tensor.shape[0]} images in a 4D Tensor\n        </h3>\n        {tf.unstack(tensor).map(t => (\n          <ImageTensorInspector tensor={t} selfDestruct />\n        ))}\n      </div>\n    )\n  } else {\n    return (\n      <p>We need a single Rank 3 Tensor, or a batch Rank 4 tensor result!</p>\n    )\n  }\n}\n","import React, { useState, useEffect } from 'react'\n// modals\nimport Modal from 'react-modal'\nimport copyToClipboard from '../lib/copyToClipboard'\nimport { BitlyClient } from 'bitly'\n\nconst bitly = new BitlyClient(process.env.REACT_APP_BITLY_TOKEN, {})\n\nconst ShareRow = props => {\n  const [shareLink, setShareLink] = useState(window.location.href)\n\n  // onload\n  useEffect(() => {\n    const generateLink = async () => {\n      const shortLink = await bitly.shorten(window.location.href)\n      setShareLink(shortLink.url)\n    }\n    generateLink()\n  }, [])\n\n  if (props.isOpen) {\n    return (\n      <div className=\"modalTop\">\n        <div className=\"leftSide\">\n          <input type=\"text\" value={shareLink} className=\"shareBox\" readOnly />\n        </div>\n        <div className=\"modalClose\">\n          <button\n            className=\"modalButton\"\n            onClick={() => {\n              try {\n                copyToClipboard(shareLink)\n              } catch (e) {\n                throw e\n              }\n              props.hideModal()\n            }}\n          >\n            copy\n          </button>\n        </div>\n      </div>\n    )\n  } else {\n    return (\n      <center>\n        <h1>\n          <span role=\"img\" aria-label=\"done\">\n            👍\n          </span>\n        </h1>\n      </center>\n    )\n  }\n}\n\nexport default props => (\n  <Modal\n    isOpen={props.isOpen}\n    onRequestClose={props.hideModal}\n    shouldCloseOnOverlayClick={true}\n    shouldCloseOnEscape={true}\n    closeTimeoutMS={750}\n    className=\"modal\"\n    overlayClassName=\"overlay\"\n    contentLabel=\"share modal\"\n  >\n    <div className=\"modalTop\">\n      <div className=\"leftSide\">\n        <h1>Share Link:</h1>\n      </div>\n      <div className=\"modalClose\">\n        <button className=\"navButton\" onClick={props.hideModal}>\n          🅧\n        </button>\n      </div>\n    </div>\n    <ShareRow {...props} link={'loading'} />\n  </Modal>\n)\n","// https://hackernoon.com/copying-text-to-clipboard-with-javascript-df4d4988697f\nexport default str => {\n  const el = document.createElement('textarea') // Create a <textarea> element\n  el.value = str // Set its value to the string that you want copied\n  el.setAttribute('readonly', '') // Make it readonly to be tamper-proof\n  el.style.position = 'absolute'\n  el.style.left = '-9999px' // Move outside the screen to make it invisible\n  document.body.appendChild(el) // Append the <textarea> element to the HTML document\n  const selected =\n    document.getSelection().rangeCount > 0 // Check if there is any content selected previously\n      ? document.getSelection().getRangeAt(0) // Store selection if found\n      : false // Mark as false to know no selection existed before\n  el.select() // Select the <textarea> content\n  document.execCommand('copy') // Copy - only works as a result of a user action (e.g. click events)\n  document.body.removeChild(el) // Remove the <textarea> element\n  if (selected) {\n    // If a selection existed before copying\n    document.getSelection().removeAllRanges() // Unselect everything on the HTML document\n    document.getSelection().addRange(selected) // Restore the original selection\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","const numberWithCommas = x => x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')\n\nexport default numBytes => numberWithCommas(Math.round(numBytes / 1024))\n","export default [\n  {\n    id: 'bella',\n    thumb: './bella_thumb.jpg',\n    desc: 'RGB Tensor',\n    full: './bella.jpg',\n    channels: 3\n  },\n  {\n    id: 'italy',\n    thumb: './italy_thumb.jpg',\n    desc: 'Monochrome Tensor',\n    full: './italy.jpg',\n    channels: 1\n  },\n  {\n    id: 'batch',\n    thumb: './batch_thumb.jpg',\n    desc: 'RGB Image Batch',\n    full: ['./batch1.jpg', './batch2.jpg', './batch3.jpg'],\n    channels: 3\n  },\n  {\n    id: 'none',\n    thumb: './null_thumb.png',\n    desc: 'No Input Tensor',\n    full: null,\n    channels: 0\n  }\n]\n"],"sourceRoot":""}